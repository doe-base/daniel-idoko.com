[ 
  {
    "_id": "9",
    "body": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Questrial&display=swap\" rel=\"stylesheet\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"path\/to\/font-awesome\/css\/font-awesome.min.css\">\r\n    <link\r\n\t\trel=\"stylesheet\"\r\n\t\thref=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/styles\/monokai.min.css\"\r\n\t\/>\r\n\t<link rel=\"stylesheet\" href=\".\/style.css\">\r\n    <title>Building Your First LAN with Cisco Packet Tracer: Download, Setup, and Essential Tools<\/title>\r\n<\/head>\r\n<style>\r\n    .hljs {\r\n      background-color: transparent;\r\n    }\r\n\r\n    .hljs-ln-n {\r\n      padding-right: 1rem;\r\n    }\r\n  <\/style>\r\n<body>\r\n\r\n\r\n    <section class=\"container\" style=\"max-width: 750px; margin: 0 auto\">\r\n\r\n\t\t<article>\r\n\t\t\t<header class=\"header\">\r\n\t\t\t\t<h1 class=\"topic\">Introduction<\/h1>\r\n\t\t\t\t<div class=\"line\"><\/div>\r\n\t\t\t<\/header>            \r\n\r\n\t\t\t<p class=\"paragraph\">\r\n\t\t\t\tCisco Packet Tracer is a free network simulation tool developed by Cisco Systems. It lets users create virtual networks and see how data packets travel across devices, making it a great way to learn networking concepts without needing physical hardware.  \r\n\t\t\t<\/p>\r\n\t\t\t<p class=\"paragraph\">\r\n\t\t\t\tIn this article, we\u2019ll build a Local Area Network (LAN) using Cisco Packet Tracer. This is a perfect project if you\u2019re new to the software, as it covers the basics and introduces you to some of its most useful tools. Let\u2019s start by downloading the software.\r\n\t\t\t<\/p>\r\n\r\n\t\t<\/article>\r\n\r\n\r\n\r\n\r\n\t\t<article>\r\n\t\t\t<header class=\"header\">\r\n\t\t\t\t<h1 class=\"topic\">How to Download Cisco Packet Tracer<\/h1>\r\n\t\t\t\t<div class=\"line\"><\/div>\r\n\t\t\t<\/header>  \r\n\r\n\t\t\t<ul class=\"paragraph\" style=\"margin-bottom: 0rem;\">\r\n\t\t\t\t<li>Go to the Cisco Networking Academy's \"Getting Started with Cisco Packet Tracer\" course: \r\n\t\t\t\t<a href=\"https:\/\/www.netacad.com\/courses\/getting-started-cisco-packet-tracer\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"blog-link\">\r\n\t\t\t\t\twww.netacad.com\/courses\/getting-started-cisco-packet-tracer\r\n\t\t\t\t<\/a>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>Click the login button in the navigation bar to sign in or create a free account.<\/li>\r\n\t\t\t\t<li>Start the course. In the first module, <strong>\"1.0 Install Cisco Packet Tracer\"<\/strong>, you\u2019ll find a resource link to download the software.<\/li>\r\n\t\t\t\t<li>Download the version for your operating system and install it as you would any other application.<\/li>\r\n\t\t\t<\/ul>\r\n\t\t\t<div class=\"img-box\">\r\n\t\t\t\t<a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/cisco%20learning%20resources.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\t\r\n\t\t\t\t\t<img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/cisco%20learning%20resources.png?raw=true\" alt=\"Cisco Networking Academy's Resource Hub page\" class=\"img\">\r\n\t\t\t\t<\/a>\r\n\t\t\t<\/div>\r\n\t\t<\/article>\r\n\r\n     \r\n\t\t<article>\r\n\t\t\t<header class=\"header\">\r\n\t\t\t\t<h1 class=\"topic\">Let's Build a Virtual Local Area Network with Cisco Packet Tracer<\/h1>\r\n\t\t\t\t<div class=\"line\"><\/div>\r\n\t\t\t<\/header> \r\n\t\t\t\t<blockquote class=\"definition\">\r\n\t\t\t\t\t<p class=\"quote-paragraph\">\r\n\t\t\t\t\tA LAN, or Local Area Network, is a group of connected computing devices within a localized area that usually share a centralized Internet connection.\r\n\t\t\t\t\t<\/p>\r\n\t\t\t\t\t<p class=\"ref\">\r\n\t\t\t\t\tref: <a target=\"_blank\" href=\"https:\/\/www.cloudflare.com\/learning\/network-layer\/what-is-a-lan\/\">cloudflare.com<\/a>\r\n\t\t\t\t\t<\/p>\r\n\t\t\t\t<\/blockquote>\r\n\t\t\t\t<p class=\"paragraph\" style=\"margin-bottom: 0;\">\r\n\t\t\t\t\tIn this project, we will build a LAN for a small internet caf\u00E9 business, which will include:\r\n\t\t\t\t<\/p>\r\n\t\t\t\t<ul class=\"paragraph\" style=\"margin-bottom: 2rem;\">\r\n\t\t\t\t\t<li style=\"margin-bottom: 0;\">1 administrative laptop<\/li>\r\n\t\t\t\t\t<li style=\"margin-bottom: 0;\">4 computers for public use<\/li>\r\n\t\t\t\t\t<li style=\"margin-bottom: 0;\">1 printer<\/li>\r\n\t\t\t\t\t<li style=\"margin-bottom: 0;\">1 router for internet connectivity<\/li>\r\n\t\t\t\t\t<li style=\"margin-bottom: 0;\">1 switch to connect all devices<\/li>\r\n\t\t\t\t<\/ul>\r\n\t\r\n\r\n\r\n\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p class=\"sub-header\">Step 1: Add Devices<\/p>  \r\n\t\t\t\t\t<p class=\"paragraph\" style=\"margin-bottom: 0rem;\">\r\n\t\t\t\t\t\tStart by adding all the devices we\u2019ll need for the network.  \r\n\t\t\t\t\t\tMake sure to use the same device models shown here, as different devices may require slightly different configurations.\r\n\t\t\t\t\t<\/p>\r\n\t\t\t\t\t<div class=\"img-box\">\r\n\t\t\t\t\t\t<a style=\"margin-bottom: 2rem; display: block;\" target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Add%20devices.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">  \r\n\t\t\t\t\t\t\t<img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Add%20devices.png?raw=true\" alt=\"Add devices in Cisco Packet Tracer\" class=\"img\">\r\n\t\t\t\t\t\t<\/a>\r\n\t\t\t\t\t<\/div>\r\n\t\t\t\t<\/div>\r\n\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p class=\"sub-header\">Step 2: Connect Devices<\/p>  \r\n\t\t\t\t\t<p class=\"paragraph\" style=\"margin-bottom: 0rem;\">\r\n\t\t\t\t\t\tUsing a <strong class=\"important-word\">copper straight-through cable<\/strong>, connect each device to the switch.  \r\n\t\t\t\t\t\tMake note of which Ethernet port each device is connected to on the switch, as well as the IP address that will later be assigned to it.  \r\n\t\t\t\t\t\t(Note: IP addresses are not assigned yet in this step.)\r\n\t\t\t\t\t<\/p>\r\n\t\t\t\t\t<div class=\"img-box\">\r\n\t\t\t\t\t\t<a style=\"margin-bottom: 2rem; display: block;\" target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Connect%20devices2.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">  \r\n\t\t\t\t\t\t\t<img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Connect%20devices2.png?raw=true\" alt=\"Connect devices with cables in Cisco Packet Tracer\" class=\"img\">\r\n\t\t\t\t\t\t<\/a>\r\n\t\t\t\t\t<\/div>\r\n\t\t\t\t<\/div>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p class=\"sub-header\">Step 3: Assign IP Addresses<\/p>  \r\n\t\t\t\t\t<p class=\"paragraph\" style=\"margin-bottom: 0;\">\r\n\t\t\t\t\t\tNow, assign an IP address to each device (except the switch):\r\n\t\t\t\t\t<\/p>\r\n\t\t\t\t\t<ul class=\"paragraph\" style=\"margin-bottom: 2rem;\">\r\n\t\t\t\t\t\t<li>Click on the device to open its <strong class=\"important-text\">Device Configuration Window<\/strong>.<\/li>\r\n\t\t\t\t\t\t<li>Navigate to the Ethernet interface that connects to the switch, then turn it on if it\u2019s off.<\/li>\r\n\t\t\t\t\t\t<li>Assign an IPv4 address (as shown in the previous step) and a subnet mask of <code>255.255.255.0<\/code>.<\/li>\r\n\t\t\t\t\t\t<div class=\"img-box\">\r\n\t\t\t\t\t\t\t<a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Router%20IP%20address.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">  \r\n\t\t\t\t\t\t\t\t<img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Router%20IP%20address.png?raw=true\" alt=\"Router IP address configuration\" class=\"img\">\r\n\t\t\t\t\t\t\t<\/a>\r\n\t\t\t\t\t\t<\/div>\r\n\r\n\t\t\t\t\t\t<li>Next, go to <span class=\"folder\">Global Settings<\/span> and set the <strong>IPv4 Default Gateway<\/strong> to your router\u2019s IP address (<code>192.168.1.1<\/code> in our case).  \r\n\t\t\t\t\t\tSkip this step for the router and printer.\r\n\t\t\t\t\t\t<\/li>\r\n\t\t\t\t\t\t<div class=\"img-box\">\r\n\t\t\t\t\t\t\t<a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Laptop%20gateway%20address.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">  \r\n\t\t\t\t\t\t\t\t<img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Laptop%20gateway%20address.png?raw=true\" alt=\"Laptop default gateway configuration\" class=\"img\">\r\n\t\t\t\t\t\t\t<\/a>\r\n\t\t\t\t\t\t<\/div>\r\n\t\t\t\t\t<\/ul>\r\n\t\t\t\t<\/div>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p class=\"sub-header\">Step 4: Run a Ping Test<\/p>  \r\n\t\t\t\t\t<p class=\"paragraph\" style=\"margin-bottom: 0rem;\">\r\n\t\t\t\t\t\tFinally, test your network connectivity.  \r\n\t\t\t\t\t\tClick on any computer or laptop, go to the <strong>Desktop<\/strong> tab, open the <strong>Command Prompt<\/strong>, and run a <code>ping<\/code> test to another device on the network.  \r\n\t\t\t\t\t\tIf everything is configured correctly, you should see successful replies.\r\n\t\t\t\t\t<\/p>\r\n\r\n\t\t\t\t\t<div class=\"img-box\">\r\n\t\t\t\t\t\t<a href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Ping%20test.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n\t\t\t\t\t\t\t<img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools\/Ping%20test.png?raw=true\" alt=\"Ping test in Cisco Packet Tracer\" class=\"img\">\r\n\t\t\t\t\t\t<\/a>\r\n\t\t\t\t\t<\/div>\r\n\t\t\t\t<\/div>\r\n\r\n\t\t<\/article>\r\n\r\n\r\n\t\t<article>\r\n\t\t\t<header class=\"header\">\r\n\t\t\t\t<h1 class=\"topic\">Conclusion<\/h1>\r\n\t\t\t\t<div class=\"line\"><\/div>\r\n\t\t\t<\/header>            \r\n\r\n\t\t\t<p class=\"paragraph\">\r\n\t\t\t\tIn this project, we built a simple LAN using Cisco Packet Tracer, connecting devices, assigning IP addresses, and testing connectivity with a ping. This setup represents a basic local network, similar to what you'd find in a small office or internet caf\u00E9.\r\n\t\t\t<\/p>\r\n\t\t\t<p class=\"paragraph\">\r\n\t\t\t\tWhile this is a simplified example, you can take it further by adding interconnections between multiple networks, configuring routers for internet access, or setting up DHCP and DNS servers to automate IP assignments and name resolution.\r\n\t\t\t<\/p>\r\n\t\t\t<p class=\"paragraph\">Experimenting with these features will give you a deeper understanding of how real-world networks operate and Cisco Packet Tracer is a great tool to keep learning and testing safely.<\/p>\r\n\r\n\t\t<\/article>\r\n\r\n\r\n    <\/section>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/highlight.min.js\"><\/script>\r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlightjs-line-numbers.js\/2.8.0\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script src=\"path\/to\/highlight.min.js\"><\/script>\r\n    <script src=\"path\/to\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script>\r\n      hljs.highlightAll();\r\n    <\/script>\r\n    <script>\r\n      hljs.initLineNumbersOnLoad();\r\n    <\/script>\r\n\r\n<\/body>\r\n<\/html>",
    "category": "networking",
    "year": "2025",
    "date": "Oct 21, 2025",
    "img": "https://github.com/doe-base/raw-blogs-articles-2025/blob/main/21-10-25%20%20Building%20Your%20First%20LAN%20with%20Cisco%20Packet%20Tracer:%20Download,%20Setup,%20and%20Essential%20Tools/600*502.png?raw=true",
    "imgalt": "cover img",
    "imgsource": "chat-gpt",
    "number": 9,
    "readduration": "20",
    "smallbody": "Learn how to create a simple Local Area Network (LAN) using Cisco Packet Tracer. This beginner-friendly guide walks you through downloading the tool, connecting devices, assigning IPs, and testing connectivity.",
    "tags": ["networking", "cisco", "project"],
    "title": "Building Your First LAN with Cisco Packet Tracer: Download, Setup, and Essential Tools",
    "views": 8
  },
  {
    "_id": "8",
    "body": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Questrial&display=swap\" rel=\"stylesheet\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"path\/to\/font-awesome\/css\/font-awesome.min.css\">\r\n    <link\r\n    rel=\"stylesheet\"\r\n    href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/styles\/monokai.min.css\"\r\n  \/>\r\n    <link rel=\"stylesheet\" href=\".\/style.css\">\r\n    <title>How to Build Habits That Stick (Using Systems, Not Willpower)<\/title>\r\n<\/head>\r\n<style>\r\n    .hljs {\r\n      background-color: transparent;\r\n    }\r\n\r\n    .hljs-ln-n {\r\n      padding-right: 1rem;\r\n    }\r\n  <\/style>\r\n<body>\r\n\r\n\r\n    <section class=\"container\" style=\"max-width: 750px; margin: 0 auto\">\r\n\r\n     <article>\r\n\t\t  <header class=\"header\">\r\n\t\t    <h1 class=\"topic\">The Problem with Motivation & Willpower<\/h1>\r\n\t\t    <div class=\"line\"><\/div>\r\n\t\t  <\/header>            \r\n\r\n\t\t  <p class=\"paragraph\" style=\"margin-bottom: 0rem;\">\r\n\t\t    The problem with relying on motivation and willpower when building habits is simple: motivation is inconsistent, and willpower is unreliable. We\u2019ve all felt this before, we get fired up, set ambitious goals like:\r\n\t\t  <\/p>\r\n\r\n\t\t  <ul class=\"paragraph\" style=\"margin-bottom: 0rem;\">\r\n\t\t    <li>I will hit the gym every day<\/li>\r\n\t\t    <li>I will stop scrolling social media and be more productive<\/li>\r\n\t\t    <li>I will learn a new language or skill<\/li>\r\n\t\t  <\/ul>\r\n\r\n\t\t  <p class=\"paragraph\">\r\n\t\t    In the moment, it feels real. We assume that when the time comes, our willpower will carry us through. And sometimes it does, for a few days. But soon the motivation fades, the willpower weakens, and we slip back into old habits.\r\n\t\t  <\/p>\r\n\r\n\t\t  <p class=\"paragraph\">\r\n\t\t    Habits don\u2019t stick because of willpower, they stick because of the <span class=\"important-text\">structures<\/span> around them. In this article, I\u2019ll show you a simple system you can apply to your own life to create the structure your new habits need to thrive.\r\n\t\t  <\/p>\r\n\t\t<\/article>\r\n\r\n\r\n\r\n\r\n\t\t<article>\r\n\t\t  <header class=\"header\">\r\n\t\t    <h1 class=\"topic\">The Key is Structure<\/h1>\r\n\t\t    <div class=\"line\"><\/div>\r\n\t\t  <\/header>  \r\n\r\n\t\t  <p class=\"paragraph\">\r\n\t\t    Structure is built from the small routines you already follow every day, your micro-habits. For example, if you don\u2019t have the habit of going to bed early, waking up early for the gym will always feel like a battle, no matter how strong your willpower is. <br\/> Or If your pantry is stocked with junk food, eating healthy will always feel like a fight. The structure needs to change, like stocking your home with better options.\r\n\t\t  <\/p>  \r\n\r\n\t\t  <p class=\"paragraph\">\r\n\t\t    The mistake most people make is trying to squeeze a new habit into their existing structure. Instead, the smarter approach is to reshape your structure so it naturally supports the habit you want to build.\r\n\t\t  <\/p>  \r\n\r\n\t\t  <p class=\"paragraph\">So, how do you actually reshape your structure? Let\u2019s look at a simple 3-step system.<\/p>  \r\n\t\t<\/article>\r\n     \r\n\r\n\t\t<article>\r\n\t\t  <header class=\"header\">\r\n\t\t    <h1 class=\"topic\">A Simple 3-Step System for Building Habits<\/h1>\r\n\t\t    <div class=\"line\"><\/div>\r\n\t\t  <\/header>            \r\n\r\n\t\t  <div>\r\n\t\t    <p class=\"sub-header\">Step 1: Outline the Habits you want to Build or Break<\/p>  \r\n\t\t    <p class=\"paragraph\">\r\n\t\t      No matter how difficult a habit feels, write it down. This system helps you build habits gradually, over time. You might not get it right on day one, but if you keep following your system, you\u2019ll see steady transformation.\r\n\t\t    <\/p>\r\n\t\t  <\/div>\r\n\r\n\t\t  <div>\r\n\t\t\t  <p class=\"sub-header\">Step 2: Prepare a Habit Tracker<\/p>  \r\n\t\t\t  <p class=\"paragraph\">\r\n\t\t\t    As mentioned earlier, the goal isn\u2019t to get everything right in a single day, the goal is to build a structure that works. Tracking your habits is vital in the early stages. You can use a journal (a physical notebook), your phone\u2019s notes app, or a great journal app like Journey.\r\n\t\t\t  <\/p>\r\n\r\n\t\t\t  <p class=\"paragraph\">\r\n\t\t\t    Every night before you sleep, write down (or log) your habits and rate how well you did on each one. You can use a 1\u201310 scale or a simple star system. For example, if you went to the gym and completed your workout, give yourself a 10\/10 or 5 stars. If you went but didn\u2019t finish, maybe a 6\/10 or 3 stars. If your goal is to cut down on social media, give yourself 10\/10 if you avoided it completely, and lower if you gave in at some point.\r\n\t\t\t  <\/p>\r\n\t\t\t<\/div>\r\n\r\n\t\t\t<div>\r\n\t\t\t  <p class=\"sub-header\">Step 3: Assess Where You Lapse and Find Solutions<\/p>  \r\n\t\t\t  <p class=\"paragraph\">\r\n\t\t\t    This is the core of the system: constantly evaluating where you slip and finding solutions. The first fix won\u2019t always be perfect, so you may need to experiment. The key is to actively change your environment so it supports your new habits. Here are a few examples:\r\n\t\t\t  <\/p>\r\n\r\n\t\t\t  <p class=\"paragraph\">\r\n\t\t\t    Suppose you want to cut down on social media, but you keep finding yourself opening the apps. Ask yourself why, and then design a solution. Maybe it\u2019s time to install an app blocker to remove temptation when willpower collapses. Maybe you need to delete the app entirely.  \r\n\t\t\t    <br\/>\r\n\t\t\t    \u201CBut Instagram is where I talk to my friends.\u201D \u2192 Then it\u2019s time to find another way to communicate.  \r\n\t\t\t  <\/p>\r\n\r\n\t\t\t \t<p class=\"paragraph\">\r\n\t\t\t    Or, suppose your goal is to hit the gym every day, but you keep oversleeping. The system tells you the solution: start going to bed earlier, or try scheduling evening workouts instead. Also, simple prompts like keeping your gym clothes within sight, also make it easier to follow through.\r\n\t\t\t  <\/p>\r\n\r\n\t\t\t<\/div>\r\n\r\n\t\t\t<p class=\"paragraph\">\r\n\t\t\t  If your current environment doesn\u2019t support your new habits, or is built around the old ones you\u2019re trying to break, you\u2019ll constantly struggle. With this system, you can regularly evaluate your environment, make changes, and align it with your habits until everything fits together. At that point, you won\u2019t need willpower, you\u2019ll simply act naturally.\r\n\t\t\t<\/p>\r\n\r\n\t\t<\/article>\r\n\r\n\r\n\t\t<article>\r\n\t\t  <header class=\"header\">\r\n\t\t    <h1 class=\"topic\">Conclusion<\/h1>\r\n\t\t    <div class=\"line\"><\/div>\r\n\t\t  <\/header>            \r\n\r\n\t\t  <p class=\"paragraph\">\r\n\t\t    Building habits is not about pushing yourself with motivation or relying on sheer willpower, it\u2019s about creating a structure that makes success inevitable. By outlining your habits, tracking your progress, and continuously adjusting your environment to support your goals, you\u2019ll naturally grow into the person you want to become. The structure does the heavy lifting; all you need to do is commit to following it. Over time, the habits you once struggled with will feel effortless, because they\u2019ll be a natural part of your life.\r\n\t\t  <\/p>\r\n\t\t  <p class=\"paragraph\">Pick one habit today, outline it, and try tracking it for the next week. You\u2019ll be surprised how quickly structure makes a difference.<\/p>\r\n\t\t<\/article>\r\n\r\n\r\n    <\/section>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/highlight.min.js\"><\/script>\r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlightjs-line-numbers.js\/2.8.0\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script src=\"path\/to\/highlight.min.js\"><\/script>\r\n    <script src=\"path\/to\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script>\r\n      hljs.highlightAll();\r\n    <\/script>\r\n    <script>\r\n      hljs.initLineNumbersOnLoad();\r\n    <\/script>\r\n\r\n<\/body>\r\n<\/html>",
    "category": "self-help",
    "year": "2025",
    "date": "Sep 22, 2025",
    "img": "https://github.com/doe-base/raw-blogs-articles-2025/blob/main/20-09-25%20How%20to%20Build%20Habits%20That%20Stick%20(Using%20Systems,%20Not%20Willpower)/300_300.png?raw=true",
    "imgalt": "cover img",
    "imgsource": "chat-gpt",
    "number": 8,
    "readduration": "10",
    "smallbody": "Habits don’t stick with willpower—they stick with structure. Learn the 3-step system to make lasting change effortless.",
    "tags": ["self help"],
    "title": "How to Build Habits That Stick (Using Systems, Not Willpower)",
    "views": 3
  },
  {
    "_id": "7",
    "body": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Questrial&display=swap\" rel=\"stylesheet\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"path\/to\/font-awesome\/css\/font-awesome.min.css\">\r\n    <link\r\n    rel=\"stylesheet\"\r\n    href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/styles\/monokai.min.css\"\r\n  \/>\r\n    <link rel=\"stylesheet\" href=\".\/style.css\">\r\n    <title>Comparing VPN Performance: State-of-the-Art Solutions in Stable vs. Unreliable Networks<\/title>\r\n<\/head>\r\n<style>\r\n    .hljs {\r\n      background-color: transparent;\r\n    }\r\n\r\n    .hljs-ln-n {\r\n      padding-right: 1rem;\r\n    }\r\n  <\/style>\r\n<body>\r\n\r\n\r\n    <section class=\"container\" style=\"max-width: 750px; margin: 0 auto\">\r\n\r\n      <article>\r\n        <header class=\"header\">\r\n            <h1 class=\"topic\">Introduction<\/h1>\r\n            <div class=\"line\"><\/div>\r\n        <\/header>   \r\n\r\n        <p class=\"paragraph\">VPNs, like many tools in technology, offer both advantages and drawbacks. A significant downside is the latency and reduced network performance they can sometimes cause. Over the years, various VPN implementations have been developed to tackle these challenges and improve overall efficiency.<\/p>\r\n        <p class=\"paragraph\">This article explores several state-of-the-art VPN implementations to assess the extent of performance degradation they experience. It is based on a 2019 study conducted by Thomas Fischer at the University of Sk\u00F6vde. The research question is as follows: <br> <span class=\"important-text\">How does the performance differ between state-of-the-art VPN solutions under stable versus unreliable network conditions?<\/span><\/p>\r\n\r\n        <div>\r\n          <p class=\"paragraph\">What's in this article:<\/p>\r\n          <ul class=\"paragraph\">\r\n            <li><a href=\"#what-are-vpn\" class=\"blog-link\">What are Virtual Private Networks (VPNs)<\/a><\/li>\r\n            <li><a href=\"#different-vpn-solutions\" class=\"blog-link\">Different VPN solutions<\/a><\/li>\r\n            <li><a href=\"#network-performance-metrics\" class=\"blog-link\">Network performance metrics<\/a><\/li>\r\n            <li><a href=\"#tools-for-measurement\" class=\"blog-link\">Tools for measurement<\/a><\/li>\r\n            <li><a href=\"#steps-for-the-experiment\" class=\"blog-link\">Steps for the experiment<\/a><\/li>\r\n            <li><a href=\"#default-configuration\" class=\"blog-link\">Important aspects of the default configuration for each VPN that could impact the perform<\/a><\/li>\r\n            <li><a href=\"#testing\" class=\"blog-link\">Testing<\/a><\/li>\r\n            <li><a href=\"#results\" class=\"blog-link\">Results<\/a><\/li>\r\n            <li><a href=\"#observations\" class=\"blog-link\">Observations<\/a><\/li>\r\n            <li><a href=\"#conclusion\" class=\"blog-link\">Conclusion<\/a><\/li>\r\n          <\/ul>\r\n        <\/div>\r\n      <\/article>\r\n\r\n        <article>\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\" id=\"what-are-vpn\">What are Virtual Private Networks (VPNs)<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>            \r\n            <p class=\"paragraph\">A Virtual Private Network (VPN) is a technology used to extend a private network over the internet, allowing authorized users (typically authenticated with a shared secret such as a password) to access it as if they were directly connected. This makes these \"authorized users\" appear to be connected to the private network, even though they may be thousands of miles and numerous router hops away.<\/p>\r\n\r\n            <div>\r\n              <p class=\"sub-header\">VPN Tunnel<\/p>\r\n              <p class=\"paragraph\">VPN connection is achieved using secure, encrypted \"tunnels\" called <span class=\"important-text\">VPN tunnels<\/span>. They are referred to as tunnels because they are established between two endpoints. When two routers are configured for tunneling, it becomes possible to send encrypted packets that might not be supported over the general internet between them. <br\/> When set up correctly, these tunnels provide:<\/p>\r\n                <ul class=\"paragraph\">\r\n                  <li><span class=\"bold\">Privacy<\/span>: By not exposing the private network to the public internet.<\/li>\r\n                  <li><span class=\"bold\">Security<\/span>: By encrypting the packets shared through the tunnels. Anyone who gains access to the encrypted packets will not be able to read them. Only authorized users can decrypt and access the data.<\/li>\r\n                  <li><span class=\"bold\">Data integrity<\/span>: Through mechanisms that detect if the data has been tampered with during transport.<\/li>\r\n                <\/ul>\r\n                <p class=\"paragraph\">\r\n                Any network running such tunnel is running a Virtual Private Network or VPN.<\/p>\r\n            <\/div>\r\n\r\n            <div>\r\n              <p class=\"sub-header\">Types of VPN Tunneling<\/p>\r\n              <ul class=\"paragraph\">\r\n                <li><span class=\"bold\">Host-to-network (Remote access) tunneling<\/span>: Allows individual users to securely connect to a private network. This is commonly used by remote workers who need access to private company files.<\/li>\r\n\r\n                <li><span class=\"bold\">Site-to-site tunneling<\/span>: Connects entire networks, often used by companies with offices in different locations.<\/li>\r\n\r\n                <li><span class=\"bold\">Split tunneling<\/span>: Routes only specific traffic through the VPN, while other traffic is sent directly to the internet. This is useful for balancing security and speed.<\/li>\r\n\r\n                <li><span class=\"bold\">Full tunneling<\/span>: Routes all traffic through the VPN, providing maximum privacy and security.<\/li>\r\n              <\/ul>\r\n            <\/div>\r\n\r\n            <!-- <div>\r\n              <p class=\"sub-header\">A Real-World Example of When VPNs Are Used<\/p>\r\n              <p class=\"paragraph\" style=\"margin-bottom: 0;\">Imagine a company with offices in Chicago, New York, and Miami, each with its own local ISP (Internet Service Provider). The company can use VPN solutions to create secure and private \"VPN tunnels\" connecting these offices. This ensures secure communication and resource sharing among them, instead of transmitting sensitive company data directly over the public and untrusted internet.<\/p>\r\n              <p class=\"paragraph\">Similarly, VPNs offer the same solution for remote workers, allowing them to securely access company resources while working from home or other locations.<\/p>\r\n            <\/div> -->\r\n\r\n            <blockquote class=\"definition\">\r\n              <p class=\"quote-paragraph\">\r\n                Side Note: VPNs provide security between two endpoints, but they do not secure the endpoints themselves. This poses a significant security risk because every endpoint with access to your VPN also has access to your private network. Additional security measures are necessary to ensure endpoint security and protect the network from potential vulnerabilities.\r\n              <\/p>\r\n            <\/blockquote>\r\n        <\/article>\r\n\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n            <h1 class=\"topic\" id=\"different-vpn-solutions\">Different VPN Solutions<\/h1>\r\n            <div class=\"line\"><\/div>\r\n          <\/header>\r\n          <p class=\"paragraph\">There are numerous VPN solutions available, but three stand out as the most popular and were used for this study: <\/p>\r\n          <ul class=\"paragraph\">\r\n            <li class=\"bold\">IPSec (IP Security Protocol)<\/li>\r\n            <li class=\"bold\">OpenVPN<\/li>\r\n            <li class=\"bold\">WireGuard<\/li>\r\n          <\/ul>\r\n          \r\n          <div>\r\n            <p class=\"sub-header\">IPsec (IP Security Protocol)<\/p>\r\n            <p class=\"paragraph\">IPsec was standardized by the Internet Engineering Task Force (IETF) in 1995. Originally developed for IPv6, it has also been widely implemented for IPv4. IPsec is an IETF-approved end-to-end authentication and encryption system. Almost all major VPN vendors include at least an IPsec compatibility mode in their products. Additionally, operating systems like Linux, Solaris, HP-UX, and AIX provide native kernel support for IPsec.<\/p>\r\n            <p class=\"paragraph\">In tunnel mode, IPsec encrypts the transport layer header, which includes source and destination port numbers. However, this approach often conflicts with how most firewalls operate. To address this issue, most modern implementations default to transport mode, where only the payloads of packets (the data being transported) are encrypted.<\/p>\r\n          <\/div>\r\n\r\n          <div>\r\n            <p class=\"sub-header\">OpenVPN<\/p>\r\n            <p class=\"paragraph\">OpenVPN has become the de facto standard for VPNs today, with over 50 million downloads since its release in 2001 (OpenVPN, 2019). It uses SSL\/TLS for key exchange and encryption. OpenVPN is open-source, which contributes to its security through the extensive scrutiny it undergoes, as anyone can review the code. In 2017, an independent review of OpenVPN was conducted by Cryptography Engineering (Hopkins and Green, 2019), and the results found no major vulnerabilities.<\/p>\r\n            <p class=\"paragraph\">OpenVPN supports both TCP and UDP, with UDP as the default. While UDP is faster, it does not perform error correction like TCP does. OpenVPN is fully functional on Windows, macOS, and Linux, and offers a wide range of ciphers and encryption methods to choose from.<\/p>\r\n          <\/div>\r\n\r\n          <div>\r\n            <p class=\"sub-header\">WireGuard<\/p>\r\n            <p class=\"paragraph\">WireGuard is a new VPN solution designed to replace two of the most widely used VPN technologies: OpenVPN and IPSec (Donenfeld, 2018). It claims to offer better performance than OpenVPN while avoiding the complexity of IPSec. Originally written for Linux systems, WireGuard is now available on multiple platforms. Like OpenVPN and IPSec, it is open-source, allowing anyone with the knowledge to audit the code. One of its design goals is to offer a straightforward configuration, similar to SSH, using asymmetric key cryptography. Currently, WireGuard supports only UDP (Donenfeld, 2018).<\/p>\r\n          <\/div>\r\n\r\n          <p class=\"paragraph\"><span class=\"bold\">Some other VPN solutions include: PPTP (Point-to-Point Tunneling Protocol), SSTP (Secure Socket Tunneling Protocol), and OpenSSH (Open Secure Shell).<\/p>\r\n          \r\n        <\/article>\r\n\r\n        <article>\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\" id=\"network-performance-metrics\">Network Performance Metrics<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>            \r\n            <p class=\"paragraph\">Here are the key metrics used in this study when testing networks: <span class=\"important-text\">throughput<\/span>, <span class=\"important-text\">latency<\/span>, and <span class=\"important-text\">packet loss<\/span>:<\/p>\r\n\r\n            <ul class=\"paragraph\">\r\n              <li><span class=\"bold\">Throughput<\/span>: This refers to how much data is sent from one point to another during a specific time frame. Throughput is typically measured in bits per second (bps). It is influenced by the entire infrastructure of the channel, including the physical medium (such as cabling) and computational power, among other factors.<\/li>\r\n\r\n              <li><span class=\"bold\">Latency<\/span>: Latency is the time it takes to transmit a packet in one direction (e.g., from client to server). In VPN testing, latency is expressed as a time value, usually measured in milliseconds (ms).<\/li>\r\n\r\n              <li><span class=\"bold\">Packet loss<\/span>: This metric refers to how many packets are \u201Clost,\u201D meaning they did not arrive from the source to the destination. Packet loss can occur due to network congestion, among other reasons. It is measured as a percentage of packets lost relative to the total packets sent.<\/li>\r\n            <\/ul>\r\n\r\n            <p class=\"sub-header\">Unreliability Handling<\/p>\r\n            <p class=\"paragraph\">Unreliability handling refers to how a network manages disturbances, which can be either artificial or natural, such as high latency or packet loss. These disturbances can be quantified by limiting the aforementioned metrics.<\/p>\r\n            <p class=\"paragraph\">For example, consider a remote worker with an unreliable network connection. The unreliability of a network could stem from fluctuating connections, such as cellular networks on a moving train traveling through areas with poor infrastructure or through mountains. It could also involve a remote worker located far from the office, requiring access to files stored across the globe. This would introduce delays far beyond the typical packet transfer delay expected when working with files stored on a server in the same building.<\/p>\r\n            <p class=\"paragraph\">Therefore, it is crucial to investigate how different VPN solutions perform on unreliable networks.<\/p>\r\n        <\/article>\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"tools-for-measurement\">Tools for Measurement<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n\r\n          <p class=\"sub-header\">iPerf<\/p>\r\n          <p class=\"paragraph\">The tool used to measure network performance is <span class=\"important-text\">iPerf3<\/span> (https:\/\/iperf.fr), version 3.1.3. The reason for choosing iPerf3 is that it effectively tests throughput and provides data on the number of packets transferred, including those that did not arrive. Since iPerf is available for Windows, Linux, and macOS, it is well-suited for this experiment, which is being conducted across all three operating systems.<\/p>\r\n          \r\n          <p class=\"sub-header\">Operating systems<\/p>\r\n          <p class=\"paragraph\">The test was performed on 3 different operating systems: <span class=\"important-text\">Windows 10<\/span>, <span class=\"important-text\">Linux Ubuntu<\/span>, and <span class=\"important-text\">macOS<\/span>.<\/p>\r\n\r\n          <p class=\"sub-header\">pfSense router<\/p>\r\n          <p class=\"paragraph\">The router used in this experiment is a <span class=\"bold\">pfSense software<\/span> router running FreeBSD 11.2-RELEASE-p10 (pfSense 2.4.4-RELEASE-p3). The reason for choosing this router is its capability to shape traffic directly using a tool called <span class=\"important-text\">dummynet<\/span>, which is built into pfSense. With dummynet, it is possible to introduce network unreliability aspects (such as delay and packet loss) directly between the VPN nodes. This approach eliminates the need for using dedicated tools or software on the individual nodes themselves, simplifying the setup and ensuring more accurate control over network conditions for the experiment.<\/p>\r\n          \r\n          <a target=\"_blank\" href=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/image.WKAJ02.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n              <img src=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/image.WKAJ02.png?raw=true\" alt=\"result table\" class=\"img\">\r\n          <\/a>\r\n        <\/article>\r\n\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"steps-for-the-experiment\">Steps for the Experiment<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n          \r\n          <p class=\"paragraph\">To accurately answer the research question\u2014<span style=\"font-style: italic;\">How does the performance differ between state-of-the-art VPN solutions under stable versus unreliable network conditions?<\/span>\u2014the following steps were taken: <\/p>\r\n          \r\n          <ol class=\"paragraph\">\r\n            <li class=\"bold\">Identify the VPN solutions to experiment on, control traffic, determine which metrics to use, choose the tools, and decide what data to collect<\/li>\r\n\r\n            <li class=\"bold\">Test the Network in the Experimental Setup Without Any VPN Solution to Identify a Baseline Performance<\/li>\r\n\r\n            <li class=\"bold\">Configure and Test VPN Solutions on Three Different Operating Systems with Network Unreliability Conditions<\/li>\r\n\r\n            <li class=\"bold\">Analyze and Compare the Results to Identify Performance Differences Between the VPN Solutions<\/li>\r\n            <\/ol>\r\n\r\n          \r\n        <\/article>\r\n\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"default-configuration\">Important aspects of the default configuration for each VPN that could impact the perform<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n          <p class=\"paragraph\">As mentioned earlier, the three VPN solutions selected for this test are OpenVPN, WireGuard, and IPSec. It is important to note that the default configurations of these VPN solutions were used. For all three VPN solutions, default settings were maintained wherever possible, rather than standardizing the settings across network protocols, cryptographic algorithms, or compression choices.<\/p>\r\n          <p class=\"paragraph\">After setting up the three VPN solutions on three different operating systems, below are some important aspects of the default configuration for each VPN that could impact the perform:<\/p>\r\n\r\n          <ul class=\"paragraph\">\r\n            <li><span class=\"bold\">Encryption Algorithm<\/span>: The performance of a VPN is significantly affected by the encryption algorithm used. Different algorithms have varying computational complexities, which can impact both the encryption\/decryption speed and overall VPN performance.<\/li>\r\n            <li><span class=\"bold\">Compression<\/span>: Compression of the payload is another factor. By default, all the tested VPN solutions have payload compression disabled. Enabling compression can reduce the size of the data being transmitted, potentially improving performance, especially in environments with high latency or limited bandwidth.<\/li>\r\n            <li><span class=\"bold\">Multi-threading<\/span>: Multi-threading specifies whether the encryption and decryption processes can be distributed across multiple CPU cores. This feature allows parallel encryption on multiple cores, which could increase the speed of encryption and decryption, leading to better overall performance for the VPN.<\/li>\r\n          <\/ul>\r\n          \r\n\r\n          <div class=\"table-container paragraph\">\r\n            <table class=\"table\">\r\n              <tbody>\r\n                <tr><\/tr>\r\n              <\/tbody>\r\n                <thead>\r\n                    <tr>\r\n                      <th class=\"th\">Default configuration<\/th>\r\n                      <th class=\"th\">IPSec<\/th>\r\n                      <th class=\"th\">WireGuard<\/th>\r\n                      <th class=\"th\">OpenVPN<\/th>\r\n                    <\/tr>\r\n                <\/thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td class=\"td\"><span class=\"bold\">Encryption Algorithm<\/span><\/td>\r\n                        <td class=\"td\">AES-256<\/td>\r\n                        <td class=\"td\">ChaCha20<\/td>\r\n                        <td class=\"td\">AES-256-GCM<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                        <td class=\"td\"><span class=\"bold\">Compression<\/span><\/td>\r\n                        <td class=\"td\">Yes*<\/td>\r\n                        <td class=\"td\">No<\/td>\r\n                        <td class=\"td\">No<\/td>\r\n                    <\/tr>\r\n                    <tr>\r\n                      <td class=\"td\"><span class=\"bold\">Multi-threading<\/span><\/td>\r\n                      <td class=\"td\">Yes<\/td>\r\n                      <td class=\"td\">Yes<\/td>\r\n                      <td class=\"td\">No<\/td>\r\n                    <\/tr>\r\n                <\/tbody>\r\n            <\/table>\r\n          <\/div>\r\n        <\/article>\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"testing\">Testing<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n          \r\n          <!-- <p class=\"paragraph\" style=\"margin-bottom: 0;\">The tests are conducted using iPerf, which is available on all three operating systems. To evaluate how the VPN solutions perform under unreliable network conditions, the network will be intentionally degraded by shaping the traffic to drop a specified percentage of packets or by adding delay. The iPerf test will then be run to assess how each VPN implementation handles the network unreliability.<\/p> -->\r\n          <!-- <p class=\"paragraph\">No inconsistencies are expected, as all VPNs are tested on the same operating systems, hardware, and using the same tool and configuration.<\/p> -->\r\n          \r\n          <p class=\"paragraph\">The image below illustrates the flow of the testing process:<\/p>\r\n          <a target=\"_blank\" href=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/image.CS3C02.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n              <img src=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/image.CS3C02.png?raw=true\" alt=\"testing flow chat\" class=\"img\">\r\n            <\/a>\r\n          <!-- <p class=\"paragraph\">The tests started without any VPN then the VPN solutions were enabled for the tests and disabled when it was done as seen in Figure 4. This flow chart was repeated three times, one loop for No VPN, one loop for Unreliability #1 and one loop for Unreliability #2.<\/p> -->\r\n           <p class=\"paragraph\">The testing procedure was structured as follows:<\/p>\r\n           <ol class=\"paragraph\">\r\n            <li><span class=\"bold\">Initial Test (No VPN)<\/span>: The first round of testing was conducted without any VPN enabled. This provided a baseline for network performance.<\/li>\r\n            <li><span class=\"bold\">Test with VPN Solutions<\/span>: After establishing the baseline, each VPN solution (OpenVPN, WireGuard, and IPSec) was enabled and tested sequentially. During these tests, the performance metrics (throughput, latency, and packet loss) were measured with the VPNs active.<\/li>\r\n            <li><span class=\"bold\">Test with Unreliability #1<\/span>: Traffic shaping was applied to introduce a 400ms delay (Unreliability #1), and the VPN solutions were tested again under these conditions.<\/li>\r\n            <li><span class=\"bold\">Test with Unreliability #2<\/span>: In the final round, the traffic shaping tool introduced 1% packet loss (Unreliability #2), and the VPNs were tested once more.<\/li>\r\n           <\/ol>\r\n\r\n           <p class=\"paragraph\">This process was repeated for all three VPN solutions (OpenVPN, WireGuard, and IPSec)<\/p>\r\n           <!-- <p class=\"paragraph\">Flow of Testing:<\/p>\r\n           <ol class=\"paragraph\">\r\n            <li>No VPN (Baseline)<\/li>\r\n            <li>Unreliability #1 (400ms Delay)<\/li>\r\n            <li>Unreliability #2 (1% Packet Loss)<\/li>\r\n           <\/ol> -->\r\n\r\n        <\/article>\r\n\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"results\">Results<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n\r\n          <p class=\"paragraph\">The results presented are values from when iPerf sends the packets to the server and server receives and presents the values. All the results presented are the mean values of the 50 tests per case. The tests are on 36 different cases. A table of all 36 individual cases can be seen in table 3.:<\/p>          \r\n          <a target=\"_blank\" href=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/result-table.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n              <img src=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/result-table.png?raw=true\" alt=\"result table\" class=\"img\">\r\n          <\/a>\r\n\r\n        <\/article>\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"observations\">Observation<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n\r\n          <p class=\"paragraph\">To reiterate, the research question for this paper is: <span style=\"font-style: italic;\" class=\"bold\">\"How does performance differ between state-of-the-art VPN solutions under stable versus unreliable network conditions?\"<\/span> A definitive conclusion is that each implementation has its own advantages and disadvantages. Some VPN solutions perform better on certain operating systems. The most impactful conclusions drawn from the results are presented below.<\/p>          \r\n          \r\n          <ul class=\"paragraph\">\r\n            <li>The best-performing VPN solution for macOS, if the network is reliable, was IPSec, followed by WireGuard, with OpenVPN performing the worst.<\/li>\r\n\r\n            <li>We can see that with any of the unreliability variables in effect, all VPNs and operating systems had reduced throughput compared to no unreliability.<\/li>\r\n\r\n            <li>Linux is fastest with the baseline and no unreliability at 943.5Mbits\/sec<\/li>\r\n\r\n            <li>All VPNs except OpenVPN perform best in Linux during the delay unreliability when comparing the other OSs under delay<\/li>\r\n\r\n            <li>All VPNs perform best in Linux while experiencing packet loss<\/li>\r\n\r\n            <li>OpenVPN is not the top performer in any test<\/li>\r\n\r\n            <li>Linux performs best in all unreliability tests except one, the unreliability #1 \u2013 delay<\/li>\r\n          <\/ul>\r\n\r\n        <\/article>\r\n\r\n        <article>\r\n          <header class=\"header\">\r\n              <h1 class=\"topic\" id=\"conclusion\">Conclusion<\/h1>\r\n              <div class=\"line\"><\/div>\r\n          <\/header>\r\n\r\n          <p class=\"paragraph\">Based on the results, a few recommendations for OS and VPN combinations emerged when using the default configuration. They can be seen in the Table below. The VPN in bold with a blue background is the overall recommended option for the specific network situation, as it had the best performance. The recommendations are as follows:<\/p>\r\n\r\n          <a target=\"_blank\" href=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/recommendation.png?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n              <img src=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks\/recommendation.png?raw=true\" alt=\"result table\" class=\"img\">\r\n          <\/a>\r\n        <\/article>\r\n        \r\n\r\n    <\/section>\r\n\r\n    \r\n    \r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/highlight.min.js\"><\/script>\r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlightjs-line-numbers.js\/2.8.0\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script src=\"path\/to\/highlight.min.js\"><\/script>\r\n    <script src=\"path\/to\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script>\r\n      hljs.highlightAll();\r\n    <\/script>\r\n    <script>\r\n      hljs.initLineNumbersOnLoad();\r\n    <\/script>\r\n\r\n<\/body>\r\n<\/html>",
    "category": "networking",
    "year": "2025",
    "date": "Jan 12, 2025",
    "img": "https://github.com/doe-base/raw-blogs-articles-2025/blob/main/05-01-25%20Comparing%20VPN%20Performance:%20State-of-the-Art%20Solutions%20in%20Stable%20vs.%20Unreliable%20Networks/logo.png?raw=true",
    "imgalt": "cover img",
    "imgsource": "chat-gpt",
    "number": 7,
    "readduration": "20",
    "smallbody": "This blog compares VPN solutions like IPSec, WireGuard, and OpenVPN on Windows 10, Linux Ubuntu, and macOS. Linux outperformed others in most tests, while IPSec was the best for macOS under reliable conditions. OpenVPN showed the weakest performance overall.",
    "tags": ["networking", "cyber security", "backend", "IP addresss"],
    "title": "Comparing VPN Performance: State-of-the-Art Solutions in Stable vs. Unreliable Networks",
    "views": 5
  },
  {
    "_id": "6",
    "body": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <link rel='preconnect' href='https://fonts.googleapis.com'>\n    <link rel='preconnect' href='https://fonts.googleapis.com'>\n    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>\n    <link href='https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap' rel='stylesheet'>\n    <link rel='preconnect' href='https://fonts.googleapis.com'>\n    <link href='https://fonts.googleapis.com/css2?family=Questrial&display=swap' rel='stylesheet'>\n    <link href='https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap' rel='stylesheet'>\n    <link rel='stylesheet' href='path/to/font-awesome/css/font-awesome.min.css'>\n    <link\n    rel='stylesheet'\n    href='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css'\n  />\n    <link rel='stylesheet' href='./style.css'>\n    <title>Subnetting Demystified: Concepts, Importance, and a Real-World Example</title>\n</head>\n<style>\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  </style>\n<body>\n\n\n    <section class='container' style='max-width: 750px; margin: 0 auto'>\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>Prerequisites</h1>\n                <div class='line'></div>\n            </header>            \n            <p class='paragraph'>The goal of this article is to give you a clear understanding of what subnetting is, its importance, and a real-world example of subnetting in action. To fully grasp the concepts in this article, you need a good understanding of what an IP address is, its structure, subnet masks, and CIDR notation. All of these topics are covered in this article: <a class='blog-link' href='/blog/5'>[Decoding IP Addresses: Mastering Subnet Mask and CIDR Notation]</a>.</p>\n        </article>\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>How Subnetting Works</h1>\n                <div class='line'></div>\n            </header>\n\n            \n            <p class='paragraph'>A network is simply a group of computers that can communicate with each other. In technical terms, it is a group of hosts within the same IP range. As the size of a network grows, communication becomes increasingly difficult due to heavy traffic loads. To address this issue, large networks can be divided into smaller, more manageable subnetworks (subnets) using a process called subnetting. Subnetting helps reduce congestion by limiting broadcast traffic to smaller groups of hosts.</p>\n            <blockquote class='definition'>\n              <p class='quote-paragraph'>\n                Subnetting is the method used to divide large networks into smaller, more manageable networks called subnetworks or subnets.\n              </p>\n            </blockquote>\n\n            <p class='sub-header'>Flat Network</p>\n            <p class='paragraph'>A flat network is a network without subdivisions (subnets), where all devices share the same broadcast domain. This can lead to issues like increased broadcast traffic, scalability problems, and security risks, which subnetting aims to address.</p>\n\n            <p class='sub-header'>Example of Subnetting</p>\n\n            <p class='paragraph'>Suppose you have a <span class='important-text'>Class C</span> IP address <span class='folder'>192.168.1.0/24</span> that needs to be divided into 4 subnets. The total number of possible IPs is 256, ranging from <span class='folder'>192.168.1.0</span> to <span class='folder'>192.168.1.255</span>.</p>\n\n           \n            <blockquote class='definition'>\n              <p class='quote-paragraph'>\n                  Note: Only 254 IP addresses are available for use because the Network address (<span class='folder'>192.168.1.0</span>) and the Broadcast address (<span class='folder'>192.168.1.255</span>) are reserved and cannot be assigned to devices. The Network address is the first IP address in the range, and the Broadcast address is the last.\n              </p>\n            </blockquote>\n\n            <p class='paragraph'>The subnet can be divided as follow:</p>\n            <ul class='paragraph'>\n                <li><span style='font-weight: bold;'>Subnet 1:</span> <span class='folder'>192.168.1.0/26</span>. This provides a total of 64 IPs from range <span class='folder'>192.168.1.0</span> to <span class='folder'>192.168.1.63</span></li>\n\n                <li><span style='font-weight: bold;'>Subnet 2:</span> <span class='folder'>192.168.1.64/26</span>. This provides a total of 64 IPs from range <span class='folder'>192.168.1.64</span> to <span class='folder'>192.168.1.127</span></li>\n\n                <li><span style='font-weight: bold;'>Subnet 3:</span> <span class='folder'>192.168.1.128/26</span>. This provides a total of 64 IPs from range <span class='folder'>192.168.1.128</span> to <span class='folder'>192.168.1.191</span></li>\n\n                <li><span style='font-weight: bold;'>Subnet 4:</span> <span class='folder'>192.168.1.192/26</span>. This provides a total of 64 IPs from range <span class='folder'>192.168.1.192</span> to <span class='folder'>192.168.1.255</span></li>\n            </ul>\n\n\n        </article>\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>Importance of Subnetting</h1>\n                <div class='line'></div>\n            </header>\n            <p class='paragraph'>Some of the importance of dividing a network into subnetworks include:</p>\n            <ul class='paragraph'>\n                <li><span style='font-weight: bold;'>Efficient Use of IP Addresses:</span> Subnetting allows the administrator to allocate only the necessary number of IPs required for that subnet, preventing waste.</li>\n\n                <li><span style='font-weight: bold;'>Improved Security:</span> Subnetting reduces security risks by limiting access between subnets. Unlike a flat network, which broadcasts packets and resources to every single host on the network.</li>\n\n                <li><span style='font-weight: bold;'>Enhanced Performance:</span> Each subnet runs faster because of the reduced broadcasting traffic burden. For example, it is easier to broadcast a packet to 10 hosts in a subnetwork than to 200 hosts in an undivided, flat network.</li>\n\n                <li><span style='font-weight: bold;'>Simplifies Network Management:</span> By dividing networks into subnetworks, the workflow on a topology becomes clearer, making it easier to manage, detect problems, and reduce downtime. When one network goes down, the others can still function properly.</li>\n\n                <li><span style='font-weight: bold;'>Privacy:</span> Subnetting limits visibility between subnets by isolating sensitive traffic from the general network. For example, the HR department does not need to see the data that travels within the Admin department.</li>\n            </ul>\n        </article>\n\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>A Real-World Application of Subnetting</h1>\n                <div class='line'></div>\n            </header>\n            <p class='paragraph'>Your company has been assigned the IP network: <span class='folder'>192.168.1.0/24</span>. As the Network Admin, you are tasked with dividing this network to serve four different departments in your company:</p>\n          \n            <ul class='paragraph'>\n              <li><span style='font-weight: bold;'>Admin</span> (50 hosts)</li>\n              <li><span style='font-weight: bold;'>HR</span> (25 hosts)</li>\n              <li><span style='font-weight: bold;'>Staff</span> (30 hosts)</li>\n              <li><span style='font-weight: bold;'>Guest</span> (14 hosts)</li>\n            </ul>\n        </article>\n\n        <p class='paragraph' style='margin-bottom: 0;'>Each subnet must accommodate the required number of hosts. The formula for calculating how many hosts are available to a network is:</p>\n        <p class='paragraph'><span class='important-text'>Hosts Available = 2<sup>h</sup> - 2</span></p>\n\n        <ul class='paragraph'>\n          Where:\n          <li><sup>h</sup> is the number of host bits in the IP address.</li>\n          <li>2 is subtracted because the network address and the broadcast address are reserved and cannot be used.</li>\n        </ul>\n\n        <div>\n          <p class='sub-header'>Finding the Number of Host Bits (h)</p>\n          <p class='paragraph'>Let's use the <span class='important-text'>Admin</span> subnet as an example. Remember, the <span class='important-text'>Admin</span> subnet needs 50 hosts.</p>\n          <p class='paragraph' style='margin-bottom: 0;'>To find h for this subnet, find the smallest power of 2 that can accommodate the required number of hosts (50) in the subnet using this formula:</p>\n          <p class='paragraph'><span class='important-text'> 2<sup>h</sup> ≥ Required Hosts + 2 </span></p>\n          \n          <p class='paragraph' style='margin-bottom: 0;'><span style='margin-right: 0.5rem; font-weight: bold;'>Number of host bits(h) =></span>  2<sup>h</sup> ≥ 50 + 2 </p>\n          <p class='paragraph'> After solving, h will equal <span class='folder'>6</span> (approximately 5.7, which rounds up to 6).\n  \n          <p class='paragraph' style='margin-bottom: 0;'>We can solve for the total number of hosts that will be available to the subnet:</p>\n          <p class='paragraph'><span style='margin-right: 0.5rem; font-weight: bold;'>Hosts Available =></span> 2<sup>6</sup> - 2 = 62</p>\n  \n          <p class='paragraph'>The <span class='important-text'>subnet mask</span> for this subnet will be: <span class='important-text'>32 - 6</span>, where 32 is the number of bits in an IP address and 6 is the number of host bits (h). This will give us a subnet mask of <span class='folder'>/26</span>.</p>\n        </div>\n\n        <div>\n          <p class='sub-header'>Allocating the Admin Subnet</p>\n          <p class='paragraph'>From the example above, we can now set the <span class='important-text'>Admin</span> Subnet as follows:</p>\n          <ul class='paragraph'>\n            <li><span style='font-weight: bold;'>Department</span>: Admin</li>\n            <li><span style='font-weight: bold;'>Number of host bits(h)</span>: 6</li>\n            <li><span style='font-weight: bold;'>Hosts Needed</span>: 50</li>\n            <li><span style='font-weight: bold;'>Hosts Available</span>: 62</li>\n            <li><span style='font-weight: bold;'>Subnet mask</span>: <span class='folder'>/26</span> or <span class='folder'>255.255.255.192</span></li>\n            <li><span style='font-weight: bold;'>Network Address</span>: <span class='folder'>192.168.1.0</span></li>\n            <li><span style='font-weight: bold;'>Broadcast Address</span>: <span class='folder'>192.168.1.63</span></li>\n            <li><span style='font-weight: bold;'>Usable IP Range</span>: <span class='folder'>192.168.1.1</span> to <span class='folder'>192.168.1.62</span></li>\n          </ul>\n\n          <p class='paragraph'>Using this example, allocate the subnet for the <span class='important-text'>HR</span>, <span class='important-text'>Staff</span>, and <span class='important-text'>Guest</span> subnets. If you get stuck anywhere, feel free to reach out to me or leave a comment.</p>\n        </div>\n\n    </section>\n\n\n\n\n\n\n\n\n\n    \n    <script src='//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js'></script>\n    <script src='//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js'></script>\n\n    <script src='path/to/highlight.min.js'></script>\n    <script src='path/to/highlightjs-line-numbers.min.js'></script>\n\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script>\n      hljs.initLineNumbersOnLoad();\n    </script>\n\n</body>\n</html>",
    "category": "networking",
    "year": "2025",
    "date": "Jan 2, 2025",
    "img": "https://github.com/daniel-idoko/blog-images/raw/refs/heads/main/blog%20logos/Subnetting%20Demystified:%20Concepts,%20Importance,%20and%20a%20Real-World%20Example.webp",
    "imgalt": "cover img",
    "imgsource": "chat-gpt",
    "number": 6,
    "readduration": "5",
    "smallbody": "Explore how subnetting works, why it matters, and see a real-world example of efficient network design",
    "tags": ["networking", "cyber security", "backend", "IP addresss"],
    "title": "Subnetting Demystified: Concepts, Importance, and a Real-World Example",
    "views": 4
  },
  {
    "_id": "5",
    "body": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <link rel='preconnect' href='https://fonts.googleapis.com'>\n    <link rel='preconnect' href='https://fonts.googleapis.com'>\n    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>\n    <link href='https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap' rel='stylesheet'>\n    <link rel='preconnect' href='https://fonts.googleapis.com'>\n    <link href='https://fonts.googleapis.com/css2?family=Questrial&display=swap' rel='stylesheet'>\n    <link href='https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap' rel='stylesheet'>\n    <link rel='stylesheet' href='path/to/font-awesome/css/font-awesome.min.css'>\n    <link\n    rel='stylesheet'\n    href='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css'\n  />\n    <link rel='stylesheet' href='./style.css'>\n    <title>Decoding IP Addresses: Mastering Subnet Mask and CIDR Notation</title>\n</head>\n<style>\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  </style>\n<body>\n\n\n    <section class='container' style='max-width: 750px; margin: 0 auto'>\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>What is an IP Address</h1>\n                <div class='line'></div>\n            </header>\n            <p class='paragraph'>In networking, IP addresses serve a straightforward purpose: <span class='important-text'>Identification</span>. They are how IoT (Internet of Things) devices locate each other, whether on a private network or the public internet.</p>\n            \n            <p class='paragraph'>In this article, I will break down the structure on an IP address, how to identify the the Network and Host portions of an IP address. I will also show you an easy way to calculate the CIDR (Classless Inter-Domain Routing) notation.</p>\n\n            <p class='paragraph'>Even though IPv6 is in widespread use today, I will be using IPv4 for the examples in this article. The concepts are still the same, the only difference is that IPv6 has more bits.</p>\n        </article>\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>IP Address Structure</h1>\n                <div class='line'></div>\n            </header>\n            <p class='paragraph'>A typical IPv4 address consists of 32 bits divided into 4 segments using dots (e.g., <span class='folder'>11000000.10101000.00000001.00000001</span>). For better human readability each segment is converted to a byte, which represents a decimal value between 0 and 255 (e.g., <span class='folder'>192.168.1.1</span>). Each segment cannot exceed 255 because the total number of unique combinations of 8 bits is 256 (including 0).</p>\n\n            <p class='paragraph'>The 32 bits of an IPv4 address are divided into two parts: the <span class='important-text'>Network portion</span> and the <span class='important-text'>Host portion</span>.</p>\n            <ul class='paragraph'>\n                <li>\n                    <p class='paragraph'>The <span style='font-weight: bold;'>Network portion</span>  defines the specific network or subnetwork that the address identifies. It is the same for every host on the network.</p>\n                </li>\n                <li>\n                    <p class='paragraph'>The <span style='font-weight: bold;'>Host portion</span> defines a node on that network, which identifies the device on the network. It is unique for every host on the network.</p>\n                </li>\n            </ul>\n            \n            <p class='paragraph'>Your next question might be: <span style='font-weight: bold;'>which part of the address is the Network, and which part is the Host?</span> Well, computers also need an answer to this question, and that's where <span class='important-text'>subnet mask</span> comes in.</p>\n        </article>\n\n\n        <article>\n            <header class='header'>\n                <h1 class='topic'>Subnet Mask</h1>\n                <div class='line'></div>\n            </header>\n            <div>\n                <p class='sub-header'>Inherent Classes (Classful Addressing)</p>\n                <p class='paragraph'>In the past, IP addresses used <span class='important-text'>inherent classes</span> to determine which bytes of the address represent the network and which parts represent the host'. The class is defined by the first few bits of the leftmost byte. Depending on the class (A, B, C, D, or E), the computer determines how to divide the address into network and host portions.</p>\n\n                <div class='table-container paragraph'>\n                    <table class='table'>\n                      <tr>\n                          <thead>\n                              <th class='th'>Classs</th>\n                              <th class='th'>1st byte</th>\n                              <th class='th'>Format</th>\n                          </thead>\n                          <tbody>\n                              <tr>\n                                  <td class='td'>A</td>\n                                  <td class='td'>1-127</td>\n                                  <td class='td'>N.H.H.H</td>\n                              </tr>\n                              <tr>\n                                  <td class='td'>B</td>\n                                  <td class='td'>128-191</td>\n                                  <td class='td'>N.N.H.H</td>\n                              </tr>\n                              <tr>\n                                  <td class='td'>C</td>\n                                  <td class='td'>192-223</td>\n                                  <td class='td'>N.N.N.H</td>\n                              </tr>\n                              <tr>\n                                  <td class='td'>D</td>\n                                  <td class='td'>224-239</td>\n                                  <td class='td'>-</td>\n                              </tr>\n                              <tr>\n                                  <td class='td'>E</td>\n                                  <td class='td'>240-255</td>\n                                  <td class='td'>-</td>\n                              </tr>\n                          </tbody>\n                      </tr>\n                    </table>\n                  </div>\n\n                <p class='paragraph'>Today, IP addresses are defined with an explicit <span class='important-text'>subnet mask</span>  (e.g., <span class='folder'>255.255.255.0</span>) that identifies the network portion. With subnets, the boundary between Network and Host can fall <span style='font-style: italic;'>between bits</span>, not just <span style='font-style: italic;'>between bytes</span> as seen in classful addressing.</p>\n\n                <p class='sub-header'>Key Characteristics of Subnet IP Addresses</p>\n                <ul class='paragraph'>\n                    <li>1s correspond to the network portion, and the 0s correspond to the host portion. When <span class='folder'>255</span> is converted to binary, the result is 8 bits (<span class='folder'>11111111</span>). This means the entire byte is part of the network portion.</li>\n                    <li>The 1s must be left-most and contiguous. You cannot have a byte that looks like <span class='folder'>10101010</span>; only something like <span class='folder'>11110000</span> is valid.</li>\n                    <li>At least eight bits must be allocated to the network portion.</li>\n                    <li>At least two bits must be allocated to the host portion.</li>\n                </ul>\n\n                <p class='paragraph'>Note that if no subnet is defined for an IP address, the computer will use the class method by default.</p>\n\n\n                <p class='sub-header'>How to Identify the Host and Network Portion with Subnet Mask</p>\n                <p class='paragraph'>If an IP address has a subnet of <span class='folder'>255.255.255.0</span>, it means the first three bytes are part of the network portion, while the last byte is the host portion. <span class='folder'>255</span> represents 1 byte (8 bits), or 11111111 in binary; it identifies the network portion(s) of an IP address. <br/> If the IP address <span class='folder'>192.168.1.1</span> has a subnet of <span class='folder'>255.255.0.0</span>, it means <span class='folder'>192.168</span> is part of the network portion, while <span class='folder'>.1.1</span> is part of the host portion.</p>\n            </div>\n\n                \n        </article>\n\n\n        <article id='Practical-Look-at-the-TCP/IP-Networking-Model'>\n            <header class='header'>\n                <h1 class='topic'>CIDR (Classless Inter-Domain Routing)</h1>\n                <div class='line'></div>\n            </header>\n            <p class='paragraph'>As mentioned earlier, the boundary between the network and host can fall between bits. This will result in bytes that are neither 255 nor 0, but in between (the combination of 1s and 0s in binary). CIDR notation is commonly used in this situation. In CIDR notation, the subnet mask is written as <span class='folder'>/XX</span>, where XX is the number of bits in the network portion.</p>\n\n            <h2 class='sub-header'>Example of CIDR (Classless Inter-Domain Routing) notation</h2>\n            <p class='paragraph'><span class='folder'>192.168.1.0/27</span> </p>\n            <p class='paragraph'>The subnetmask /27 means the first 27 bits are the network portion. I.e The subnet mask in binary will be: <br/>11111111.11111111.11111111.11100000 when converted each byte to decimal, will be 255.255.255.224. <br/>As usual the 1s are network while the 0s are host portion.</p>\n\n        </article>\n\n    </section>\n\n\n\n\n\n\n\n\n\n    \n    <script src='//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js'></script>\n    <script src='//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js'></script>\n\n    <script src='path/to/highlight.min.js'></script>\n    <script src='path/to/highlightjs-line-numbers.min.js'></script>\n\n    <script>\n      hljs.highlightAll();\n    </script>\n    <script>\n      hljs.initLineNumbersOnLoad();\n    </script>\n\n</body>\n</html>",
    "category": "networking",
    "year": "2024",
    "date": "Sep 28, 2024",
    "img": "https://solidwp.com/wp-content/uploads/2022/07/What-is-an-IP-Address-1024x537.png",
    "imgalt": "cover img",
    "imgsource": "solidwp.com",
    "number": 5,
    "readduration": "5",
    "smallbody": "Understanding the Structure of an IP Address and Mastering CIDR Notation",
    "tags": ["networking", "cyber security", "backend"],
    "title": "Decoding IP Addresses: Mastering Subnet Mask and CIDR Notation",
    "views": 5
  },
  {
    "_id": "4",
    "body": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Questrial&display=swap\" rel=\"stylesheet\">\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"path\/to\/font-awesome\/css\/font-awesome.min.css\">\r\n    <link\r\n    rel=\"stylesheet\"\r\n    href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/styles\/monokai.min.css\"\r\n  \/>\r\n    <link rel=\"stylesheet\" href=\".\/style.css\">\r\n    <title>TCP\/IP Networking Model<\/title>\r\n<\/head>\r\n<style>\r\n    .hljs {\r\n      background-color: transparent;\r\n    }\r\n\r\n    .hljs-ln-n {\r\n      padding-right: 1rem;\r\n    }\r\n  <\/style>\r\n<body>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <section class=\"container\" style=\"max-width: 750px; margin: 0 auto\">\r\n\r\n        <article>\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\">Introduction<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>\r\n            <p class=\"paragraph\">The TCP\/IP network model is referred to as a network suite. It is referred to as a suite because it consists of different networking protocols working together to transmit data packets from <span class=\"folder\">host A<\/span> to <span class=\"folder\">host B<\/span> and ensure a reliable connection between networks. These protocols are arranged in a <strong class=\"important-text\">hierarchy<\/strong> or <strong class=\"important-text\">stack<\/strong>, where the higher-level protocols make use of the protocols beneath them. TCP\/IP is the backbone protocol on which the Internet runs and a core protocol for computer networking in general.<\/p>\r\n            \r\n            <p class=\"paragraph\">Several competing protocol suites exist, but TCP\/IP has been by far the most successful over the decades. This is because of its elegant and flexible design and the fact that it is a <strong class=\"important-text\">nonproprietary<\/strong> protocol suite (not owned or controlled exclusively by a single entity).<\/p>\r\n\r\n            <p class=\"paragraph\">In this article, we will break down the TCP\/IP Network Model in more detail, define some key terms, and take a look at the TCP\/IP layering model.<\/p>\r\n        <\/article>\r\n\r\n\r\n        <article>\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\">Definition of Terms<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>\r\n            <div>\r\n                <div class=\"sub-header\">TCP - Transmission Control Protocol<\/div>\r\n                <p class=\"paragraph\">TCP is a <span class=\"important-text\">connection-oriented<\/span> protocol that provides reliable data transfer, error detection and correction, segmentation, and reassembly. It operates at the Transport Layer of the TCP\/IP Network Model and is a core protocol in the Internet protocol suite. TCP is often compared to <a class=\"blog-link\" href=\"https:\/\/www.cloudflare.com\/learning\/ddos\/glossary\/user-datagram-protocol-udp\/#:~:text=The%20User%20Datagram%20Protocol%2C%20or,connection%20before%20data%20is%20transferred.\" target=\"_blank\">UDP (User Diagram Data)<\/a>, but TCP is generally preferred in networks requiring high reliability due to its robust error-handling mechanisms.<\/p>\r\n            <\/div>\r\n            <div>\r\n                <div class=\"sub-header\">IP - Internet Protocol<\/div>\r\n                <p class=\"paragraph\">You've definitely heard the term \"IP address\" before. The Internet Protocol is a core protocol for transmitting data packets because it handles the tasks of <span class=\"important-text\">addressing and routing packets<\/span>. Every host must have an IP address through which packets can be addressed to it and every device with an IP address is considered a host. There are currently two standard versions of the Internet Protocol: IPv4 and IPv6. (<a class=\"blog-link\" href=\"https:\/\/www.simplilearn.com\/tutorials\/cyber-security-tutorial\/difference-between-ipv4-and-ipv6#:~:text=IPv4%20is%20composed%20of%2032,the%20Internet%20Protocol%20(IP).\" target=\"_blank\">Read more about IP here<\/a>)<\/p>\r\n            <\/div>\r\n            <div>\r\n                <div class=\"sub-header\">Packets<\/div>\r\n                <p class=\"paragraph\">The term \"packets\" is used in various places in this article. It simply refers to small units of data. When transmitting data, large data sets are broken down into packets to meet the <span class=\"important-text\">Maximum Transfer Unit (MTU)<\/span> of a particular network. Each packet is framed with a <span class=\"important-text\">header<\/span>, which consists of its addressing information such as its source IP address and destination IP address.<\/p>\r\n            <\/div>\r\n        <\/article>\r\n\r\n\r\n        <article id=\"Practical-Look-at-the-TCP\/IP-Networking-Model\">\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\">A Practical Look at the TCP\/IP Networking Model<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>\r\n            <p class=\"paragraph\">In this section we'll take a shallow look at an instance of a Computer Network in action to better understand the role of the TCP\/IP network model.<\/p>\r\n\r\n            <p class=\"paragraph\">Assuming you have two laptops and need to transfer some files from <span class=\"folder\">Laptop A<\/span> to <span class=\"folder\">Laptop B<\/span>, you'll be presented with a couple of options (both wired and wireless). Let's assume you choose an Ethernet cable for the transfer. Modern systems have streamlined the data transfer process, making much of it opaque to the user. In this chapter, we'll delve deeper into the process of your files traveling from <span class=\"folder\">Laptop A<\/span> to <span class=\"folder\">Laptop B<\/span>.<\/p>\r\n\r\n            <p class=\"paragraph\">After plugging each end of the Ethernet cable into both laptops, the next step is to assign each laptop an IP address within the same network range. For example, <span class=\"folder\">Laptop A<\/span> could be assigned <span class=\"folder\">10.10.10.1<\/span>, while <span class=\"folder\">Laptop B<\/span> would be assigned <span class=\"folder\">10.10.10.2<\/span>. This creates a private IP address range through which both laptops can transfer data addressed to each other's IP addresses. Each laptop automatically learns the other's IP address via an <a class=\"blog-link\" href=\"https:\/\/en.wikipedia.org\/wiki\/Address_Resolution_Protocol\" target=\"_blank\">ARP (Address Resolution Protocol)<\/a> request,\r\n               and a connection is then established.<\/p>\r\n\r\n            <p class=\"paragraph\">When you transfer files from <span class=\"folder\">Laptop A<\/span>, addressed to <span class=\"folder\">Laptop B's<\/span> IP address, the data passes through a series of <span class=\"important-text\">TCP network layers<\/span> to reach its destination. Let's delve into these layers and see their role in data transmission.<\/p>\r\n        <\/article>\r\n\r\n\r\n        <article>\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\">The TCP\/IP Network Layers<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>\r\n            <a target=\"_blank\" href=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/24-8-24%20TCP%20Network%20Model\/osi-vs-tcpip-cp-image.JPG?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                <img src=\"https:\/\/github.com\/doe-base\/raw-blogs-articles-2025\/blob\/main\/24-8-24%20TCP%20Network%20Model\/osi-vs-tcpip-cp-image.JPG?raw=true\" alt=\"tcp-osi network models\" class=\"img\">\r\n            <\/a>\r\n            <p class=\"paragraph\">The TCP\/IP network model conventionally consists of four (4) distinct layers: <span class=\"folder\">Application layer<\/span>, <span class=\"folder\">Transport layer<\/span>, <span class=\"folder\">Network layer<\/span>, and <span class=\"folder\">Link layer<\/span>. This model is a simplified version of the OSI (Open Systems Interconnection) model, which has seven (7) layers: <span class=\"folder\">Application layer<\/span>, <span class=\"folder\">Presentation layer<\/span>, <span class=\"folder\">Session layer<\/span>, <span class=\"folder\">Transport layer<\/span>, <span class=\"folder\">Network layer<\/span>, <span class=\"folder\">Data link layer<\/span>, and <span class=\"folder\">Physical layer<\/span>. The TCP\/IP model combines some layers of the OSI model for simplicity. Let's explore the four layers of the TCP\/IP model:<\/p>\r\n\r\n            <div>\r\n                <div class=\"sub-header\">1. Link Layer<\/div>\r\n                <p class=\"paragraph\" style=\"margin-bottom: 1rem;\">This layer is also known as the Network Interface Layer or Network Access Layer. It's responsible for framing and transmitting data bits over a physical medium. This can be transmitted wirelessly via electromagnetic waves or physically via wired signals. Examples of physical components include cables, optical fibers, radio waves, etc. In our practical example from the previous section &lt; <a class=\"blog-link\" href=\"#Practical-Look-at-the-TCP\/IP-Networking-Model\">Practical Look at the TCP\/IP Networking Model<\/a> &gt;, this would be the Ethernet cable used to connect the two computers.<\/p>\r\n                <p class=\"paragraph\" style=\"margin-bottom: 0rem;\">Framing and Transmission is handle by two separate components of the Link layer:<\/p>\r\n                <ul class=\"paragraph-ul\">\r\n                    <li>Link Layer Control - Handles framing the packets<\/li>\r\n                    <li>Media Access Control - Handles transmitting the packet to physical components.<\/li>\r\n                <\/ul>\r\n            <\/div>\r\n\r\n            <div>\r\n                <div class=\"sub-header\">2. Network or Internet Layer<\/div>\r\n                <p class=\"paragraph\" style=\"margin-bottom: 1rem;\">This layer consists of protocols responsible for the logical transmission of data over a network. Examples of these protocols include: Internet Protocol (IP), Internet Control Message Protocol (ICMP), and Address Resolution Protocol (ARP). Each of these protocols plays a specific role in transmitting data.<\/p>\r\n                <p class=\"paragraph\" style=\"margin-bottom: 1rem;\">In our practical example from the previous section &lt; <a class=\"blog-link\" href=\"#Practical-Look-at-the-TCP\/IP-Networking-Model\">Practical Look at the TCP\/IP Networking Model<\/a> &gt;, we assigned different but similar IP addresses to each laptop. The similarity (10.10.10.x) indicates that they belong to the same subnet. As <span class=\"folder\">Laptop A<\/span> transmits a data packet to <span class=\"folder\">Laptop B<\/span>, the packet will be framed in <span class=\"folder\">Laptop A's<\/span> Link Layer Control. The frame will contain <span class=\"folder\">Laptop B's<\/span> IP address as the destination.<\/p>\r\n                <p class=\"paragraph\">If there were more than two laptops connected to the network, communication would be impossible without IP addresses. IP addresses are essential for each laptop to know how to send files to others within the network.<\/p>\r\n            <\/div>\r\n\r\n            <div>\r\n                <div class=\"sub-header\">3. Transport Layer<\/div>\r\n                <p class=\"paragraph\">This layer consists of protocols that provide reliable data transfer from one host in a network to the endpoint or receiving host of the network. It is concerned with end-to-end communication. TCP, UDP, and SCTP (Stream Control Transmission Protocol) are examples of Transport layer protocols.<\/p>\r\n\r\n                <p class=\"paragraph\">End-to-end communication means sender-to-receiver communication. In our practical example from the previous section &lt; <a class=\"blog-link\" href=\"#Practical-Look-at-the-TCP\/IP-Networking-Model\">Practical Look at the TCP\/IP Networking Model<\/a> &gt;, we looked at a very simple network topology involving only two devices. In the Internet or a more complex network topology, data does not always travel directly from one host to another. It usually hops through a series of routes before reaching its destination host.<\/p>\r\n\r\n                <p class=\"paragraph\">Communication between one route and the next route is referred to as <span class=\"important-text\">hop-to-hop<\/span> communication while the overall communication between the source host and destination host is the <span class=\"important-text\">end-to-end<\/span> communication.<\/p>\r\n                \r\n                <p class=\"paragraph\">As packets travel through these complex topologies, they are always aware of their next hop through a Layer 2 header using a <span class=\"important-text\">MAC (Media Access Control)<\/span> address and their destination host through a Layer 3 header using an IP address. Every IOT device is assigned a unique MAC address at the time of manufacture.<\/p>\r\n            <\/div>\r\n\r\n            <div>\r\n                <div class=\"sub-header\">4. Application Layer<\/div>\r\n                <p class=\"paragraph\" style=\"margin-bottom: 1rem;\">This layer combines the Session and Presentation layers from the OSI layer model. The Application layer consists of protocols that work directly with the end user's applications, providing various network services to these applications. Some Application layer protocols include SSH (Secure Shell), FTP (File Transfer Protocol), HTTP (Hypertext Transfer Protocol), DNS (Domain Name System), SNMP (Simple Network Management Protocol), and many more.<\/p>\r\n            <\/div>\r\n        <\/article>\r\n\r\n\r\n        <article id=\"Practical-Look-at-the-TCP\/IP-Networking-Model\">\r\n            <header class=\"header\">\r\n                <h1 class=\"topic\">Conclusion<\/h1>\r\n                <div class=\"line\"><\/div>\r\n            <\/header>\r\n            <p class=\"paragraph\">In this exploration of the TCP\/IP Network Model, we've delved into the fundamental layers and protocols that underpin modern computer networking.<\/p>\r\n\r\n            <p class=\"paragraph\">We've examined how data flows through the network, starting at the Application layer and traversing the Transport, Network, and Link layers. We've also explored the roles of key protocols like TCP, IP, and ARP in ensuring reliable and efficient communication.<\/p>\r\n\r\n            <p class=\"paragraph\">By understanding the TCP\/IP model, you gain a deeper appreciation for the complex processes involved in modern computer networking. This knowledge can be valuable for troubleshooting network issues, designing network architectures, and staying informed about emerging networking technologies.<\/p>\r\n        <\/article>\r\n\r\n    <\/section>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlight.js\/11.6.0\/highlight.min.js\"><\/script>\r\n    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/highlightjs-line-numbers.js\/2.8.0\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script src=\"path\/to\/highlight.min.js\"><\/script>\r\n    <script src=\"path\/to\/highlightjs-line-numbers.min.js\"><\/script>\r\n\r\n    <script>\r\n      hljs.highlightAll();\r\n    <\/script>\r\n    <script>\r\n      hljs.initLineNumbersOnLoad();\r\n    <\/script>\r\n\r\n<\/body>\r\n<\/html>",
    "category": "networking",
    "year": "2024",
    "date": "Aug 24, 2024",
    "img": "https://blog.equinix.com/wp-content/uploads/2023/09/AdobeStock_600358251-1024x574.jpeg",
    "imgalt": "cover img",
    "imgsource": "equinix.com",
    "number": 4,
    "readduration": "10",
    "smallbody": "Lets dive into the fundamental layers and protocols that underpin modern computer networking, the TCP/IP network layers.",
    "tags": ["networking", "cyber security", "backend"],
    "title": "TCP/IP Networking Model",
    "views": 6
  },
  {
    "_id": "3",
    "body": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\" /\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n    \u003ctitle\u003eCRUD operations with Mongodb GoLang Driver\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"./style.css\" /\u003e\n\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Questrial\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface\u0026family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /\u003e\n    \u003clink\n      href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200;400;500;700\u0026display=swap\"\n      rel=\"stylesheet\"\n    /\u003e\n    \u003c!-- \u003clink href=\"https://{{cdn}}/prismjs@v1.x/themes/prism.css\" rel=\"stylesheet\" /\u003e --\u003e\n    \u003c!-- \u003clink href=\"prism.css\" rel=\"stylesheet\" type=\"text/css\" /\u003e --\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css\"\n    /\u003e\n  \u003c/head\u003e\n  \u003cstyle\u003e\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  \u003c/style\u003e\n  \u003cbody\u003e\n    \u003csection class=\"container\" style=\"max-width: 750px; margin: 0 auto\"\u003e\n\n      \n      \u003c!-- ** Introduction --\u003e\n      \u003carticle\u003e\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch3 class=\"topic\"\u003eIntroduction\u003c/h3\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003e\n            Mongodb is classified as a JSON-like, document oriented database programme. It\n              is the leading NoSQL database. While Golang\n              is a statically typed, compiled programming language designed at\n              Google. It is built to be simple, high-performing, readable, and\n              efficient.\n            \u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003e\n              CRUD operations with mongodb golang driver covers how to manage and perform various API - CRUD operations on a\n              mongodb database using the mongodb golang driver. This will include:\n              \u003ca href=\"#\" class=\"blog-link\"\u003ecreating\u003c/a\u003e,\n              \u003ca href=\"#\" class=\"blog-link\"\u003ereading\u003c/a\u003e,\n              \u003ca href=\"#\" class=\"blog-link\"\u003eupdating\u003c/a\u003e, and\n              \u003ca href=\"#\" class=\"blog-link\"\u003edeleting\u003c/a\u003e documents from a\n              mongo database.\n            \u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003e\n              This tutorial is a pratical one, which means we'll be learning by\n              bulding a project. We'll be building the backend of a\n              \u003cstrong class=\"important-text\"\u003e'Photo Gallary App'\u003c/strong\u003e that allow\n              users to save their photos, delete photos, view photos at will, and am\n              sure you get the point.\n            \u003c/p\u003e\n          \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n      \n      \u003carticle\u003e\n        \u003c!-- ** Prerequisites --\u003e\n        \u003cdiv  class=\"header\"\u003e\n          \u003ch3 class=\"topic\"\u003ePrerequisites\u003c/h3\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n  \n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003eTo follow this tutorial, you will need:\u003c/p\u003e\n          \u003cdiv class=\"list-holder paragraph\"\u003e\n            \u003cul\u003e\n              \u003cli class=\"list-item\"\u003e\n                Golang installed on you system, which you can get install from the\n                \u003ca target=\"_blank\" href=\"https://go.dev\" class=\"blog-link\"\n                  \u003eGo offical website\u003c/a\n                \u003e\n              \u003c/li\u003e\n              \u003cli class=\"list-item\"\u003e\n                Mongodb Database Connection URL, which you can easily generate by\n                following this blog,\n                \u003ca target=\"_blank\" href=\"/blog/66e9de353c14661b52cb7af9\" class=\"blog-link\"\n                  \u003eCreate A Mongodb Cluster and Generate A Connection String\n                  URL\u003c/a\n                \u003e\n              \u003c/li\u003e\n              \u003cli class=\"list-item\"\u003e\n                Familiarity with the concept of a\n                \u003ca target=\"_blank\" href=\"https://www.techtarget.com/searchdatamanagement/definition/database\" class=\"blog-link\"\u003eData Base\u003c/a\u003e\n              \u003c/li\u003e\n              \u003cli class=\"list-item\"\u003eBasic knowlege of Golang programming.\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n\n\n      \u003c!-- ** Install External Packages --\u003e\n      \u003carticle\u003e\n        \u003cdiv  class=\"header\"\u003e\n          \u003ch1 class=\"topic\"\u003eInstall External Packages\u003c/h1\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003e\n            In this section we will be installing all the external packages needed\n            to build this project. We'll do this by executing a series of\n            termitnal commands.\n          \u003c/p\u003e\n          \u003cp class=\"paragraph\"\u003e\n            Create a new directory for this project and create a\n            \u003cspan class=\"folder\"\u003emain.go\u003c/span\u003e file inside it.\n          \u003c/p\u003e\n          \u003cdiv class=\"list-holder paragraph\"\u003e\n            \u003c!--** Ordered List --\u003e\n            \u003col\u003e\n              \u003c!-- ** Item 1 --\u003e\n              \u003cli\u003e\n                \u003cstrong class=\"important-sentence\"\u003e\n                  Initialising our project into a\n                  \u003cstrong class=\"important-text\"\u003e'module'\u003c/strong\u003e\u003c/strong\n                \u003e\n              \u003c/li\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Before we start installing the packages we need for this project,\n                open a terminal window pointing to you project directory and\n                execute the following command:\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"code-snippet\"\u003e\n                \u003cdiv class=\"code-header\"\u003eterminal\u003c/div\u003e\n                \u003cdiv class=\"code-body\"\u003e\n                  \u003cpre class=\"code\"\u003e\u003e go mod init \"gallary-app\"\u003c/pre\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cp class=\"paragraph\"\u003e\n                This should create a new\n                \u003cstrong class=\"folder\"\u003ego.mod\u003c/strong\u003e file in your project\n                directory\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"md-2\"\u003e\u003c/div\u003e\n  \n              \u003c!-- ** Item 2 --\u003e\n              \u003cli\u003e\n                \u003cstrong class=\"important-sentence\"\u003e\n                  Install golang's gorilla/mux package\u003c/strong\n                \u003e\n              \u003c/li\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Gorilla/mux is a popular external go package, used to create HTTP routers for go\n                applications.\n              \u003c/p\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Run the following terminal command in your project directory to\n                install Gorilla/mux:\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"code-snippet\"\u003e\n                \u003cdiv class=\"code-header\"\u003eterminal\u003c/div\u003e\n                \u003cdiv class=\"code-body\"\u003e\n                  \u003cpre class=\"code\"\u003e\u003e go get -u github.com/gorilla/mux\u003c/pre\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n  \n              \u003cdiv class=\"md-2\"\u003e\u003c/div\u003e\n  \n              \u003c!-- ** Item 3 --\u003e\n              \u003cli\u003e\n                \u003cstrong class=\"important-sentence\"\u003e\n                  Install the mongodb golang driver\u003c/strong\n                \u003e\n              \u003c/li\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Now let install the most important external package we will be\n                needing for this application.\n              \u003c/p\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Run the following terminal command in your project directory to\n                install Go's mongodb driver:\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"code-snippet\"\u003e\n                \u003cdiv class=\"code-header\"\u003eterminal\u003c/div\u003e\n                \u003cdiv class=\"code-body\"\u003e\n                  \u003cpre class=\"code\"\u003e\u003e go get go.mongodb.org/mongo-driver/mongo\u003c/pre\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/ol\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n\n\n\n      \u003carticle\u003e\n\n        \u003c!-- ** Create Router and Start Server --\u003e\n        \u003cdiv  class=\"header\"\u003e\n          \u003ch1 class=\"topic\"\u003eCreate Router Using Gorilla/mux\u003c/h1\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n  \n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003e\n            Head to the \u003cstrong class=\"folder\"\u003emain.go\u003c/strong\u003e file and start by\n            creating a \u003cstrong class=\"folder\"\u003erouter\u003c/strong\u003e for this project\n            using the Gorilla/mux package we installed earlier. Our router will be handling the following \u003cspan class=\"folder\"\u003eHTTP\u003c/span\u003e request:\n          \u003c/p\u003e\n          \u003cdiv class=\"table-container\"\u003e\n            \u003ctable class=\"table\"\u003e\n              \u003ctr\u003e\n                  \u003cthead\u003e\n                      \u003cth class=\"th\"\u003eRoute\u003c/th\u003e\n                      \u003cth class=\"th\"\u003eRequest Method\u003c/th\u003e\n                      \u003cth class=\"th\"\u003eHandler Function\u003c/th\u003e\n                  \u003c/thead\u003e\n                  \u003ctbody\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/get-photos\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGET\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGetAllPhotos\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/get-photo/{id}\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGET\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGetPhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/create-photo\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003ePOST\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eCreatePhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003c!-- \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/update-photo/{id}\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003ePUT\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eUpdatePhoto\u003c/td\u003e\n                      \u003c/tr\u003e --\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/delete-photo/{id}\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDELETE\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDeletePhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/delete-photos\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDELETE\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDeleteAllPhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                  \u003c/tbody\u003e\n              \u003c/tr\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n  \n  \n        \u003cp class=\"paragraph\"\u003eFirst import the gorilla/mux package, then create a new \u003cspan class=\"folder\"\u003erouter\u003c/span\u003e using the \u003cspan class=\"folder\"\u003emux.NewRouter()\u003c/span\u003e function. Finally, create 5 \u003cspan class=\"folder\"\u003erouter.HandleFunc()\u003c/span\u003e function to handle each request.\u003c/p\u003e\n        \u003cp class=\"paragraph\"\u003eThis is what your \u003cspan class=\"folder\"\u003emain.go\u003c/span\u003e file should look like:\u003c/p\u003e\n  \n        \u003cdiv class=\"code-snippet\"\u003e\n          \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n          \u003cdiv class=\"code-body\"\u003e\n            \u003cpre class=\"pre\"\u003e\n                        \u003ccode class=\"code go\"\u003epackage main\n  \nimport (\n  \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\n    router := mux.NewRouter()\n        \n    router.HandleFunc(\"/get-photos\", GetAllPhotos).Methods(\"GET\")\n    router.HandleFunc(\"/get-photo/{id}\", GetPhoto).Methods(\"GET\")\n    router.HandleFunc(\"/create-photo\", CreatePhoto).Methods(\"POST\")\n    router.HandleFunc(\"/update-photo/{id}\", UpdatePhoto).Methods(\"PUT\")\n    router.HandleFunc(\"/delete-photo/{id}\", DeletePhoto).Methods(\"DELETE\")\n    router.HandleFunc(\"/delete-photos\", DeleteAllPhoto).Methods(\"DELETE\")\n\n}\u003c/code\u003e\u003c/pre\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n          \n          \u003c!-- ** Create Router and Start Server --\u003e\n          \u003cdiv  class=\"header\"\u003e\n              \u003ch1 class=\"topic\"\u003eStart Listening for HTTP Server Request\u003c/h1\u003e\n              \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n              \u003cp class=\"paragraph\"\u003eNext, start listening for server request on port \u003cspan class=\"folder\"\u003e8080\u003c/span\u003e using the \u003cspan class=\"folder\"\u003ehttp.ListenAndServe()\u003c/span\u003e function from the \u003cstrong class=\"important-text\"\u003e\"net/http\"\u003c/strong\u003e package in the \u003ca href=\"https://pkg.go.dev/std\" class=\"blog-link\" target=\"_blank\"\u003eGo standard library\u003c/a\u003e. The function take two arguments: \u003cspan class=\"folder\"\u003eport number\u003c/span\u003e and \u003cspan class=\"folder\"\u003ehttp handler function\u003c/span\u003e, and it returns one value of type \u003cspan class=\"folder\"\u003eerror\u003c/span\u003e, which we'll use to check for any errors.\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e...\n  \nfmt.Println(\"starting server on port 8080\")\nserverErr := http.ListenAndServe(\":8080\", router)\nif serverErr != nil {\n    panic(serverErr)\n}\u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n              \u003cp class=\"paragraph\"\u003eMake sure you import the \"net/http\" package.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \u003carticle\u003e\n\n                      \u003c!-- ** Connection to Mongodb --\u003e\n                      \u003cdiv  class=\"header\"\u003e\n                          \u003ch1 class=\"topic\"\u003eConnect To Mongodb\u003c/h1\u003e\n                          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n                      \u003c/div\u003e\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003e\n                    To connect to Mongodb, you need to create a \n                    \u003ca target=\"_blank\" class=\"blog-link\" href=\"https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html#:~:text=A%20database%20connection%20URL%20is,connect%20to%2C%20and%20configuration%20properties.\"\u003e\u003cstrong class=\"important-text\"\u003eConnection String URL\u003c/strong\u003e\u003c/a\u003e using\n                    this format below and store in a \u003cstrong class=\"folder\"\u003evariable\u003c/strong\u003e.\n                    \u003cdiv class=\"code-snippet\"\u003e\n                      \u003cdiv class=\"code-header\"\u003etxt\u003c/div\u003e\n                      \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\n                              \u003ccode class=\"code txt\"\u003emongodb+srv://[username]:[password]@[cluster_name].wvunv.mongodb.net/[database]?retryWrites=true\u0026w=majority\u003c/code\u003e\u003c/pre\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e \n                  \u003c/p\u003e\n                  \u003cp class=\"paragraph\"\u003eYou can also\n                      generate a\n                      \u003cstrong class=\"important-text\"\u003econnect string URL\u003c/strong\u003e by\n                    following this article,\n                    \u003ca target=\"_blank\" href=\"/blog/66e9de353c14661b52cb7af9\" class=\"blog-link\"\n                      \u003eCreate A Mongodb Cluster and Generate A Connection String URL\u003c/a\n                    \u003e.\u003c/p\u003e\n                    \n                    \u003cp class=\"paragraph\"\u003eNext, create \u003cspan class=\"folder\"\u003econtext\u003c/span\u003e using the \u003cspan class=\"folder\"\u003econtext.WithTimeout()\u003c/span\u003e function from the Go standard library.\u003c/p\u003e\n                    \u003cblockquote class=\"definition\"\u003e\n                        \u003cp class=\"quote-paragraph\"\u003e\n                            \u003cstrong class=\"important-text\"\u003eContext\u003c/strong\u003e is a standard\n                            package of Golang that makes it easy to pass request-scoped values,\n                          cancelation signals, and deadlines across API boundaries to all the\n                          goroutines involved in handling a request.\n                        \u003c/p\u003e\n                        \u003cp class=\"ref\"\u003e\n                          ref:\n                          \u003ca\n                          target=\"_blank\"\n                          class=\"blog-link\"\n                            href=\"https://www.educative.io/answers/golang-context\"\n                            \u003eeducative.io\u003c/a\n                          \u003e\n                        \u003c/p\u003e\n                      \u003c/blockquote\u003e\n                    \u003cp class=\"paragraph\"\u003eParses your connection url using the \u003cspan class=\"folder\"\u003eoptions.Client().ApplyURI()\u003c/span\u003e function from the \u003cstrong class=\"important-text\"\u003e\"mongo-driver/mongo/options\"\u003c/strong\u003e package we installed earlier.\u003c/p\u003e\n                    \u003cp class=\"paragraph\"\u003eEstablish connection to the Mongodb using the \u003cspan class=\"folder\"\u003emongo.connect()\u003c/span\u003e function. \u003c/p\u003e\n                    \u003cp class=\"paragraph\"\u003eAt this point your \u003cspan class=\"folder\"\u003emain.go\u003c/span\u003e file should look like this:\u003c/p\u003e\n            \n                    \u003cdiv class=\"code-snippet\"\u003e\n                        \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                        \u003cdiv class=\"code-body\"\u003e\n                          \u003cpre class=\"pre\"\u003e\n                                \u003ccode class=\"code go\"\u003epackage main\n            \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nvar Client *mongo.Client\n\nfunc main() {\n\n  router := mux.NewRouter()\n\n  connectionURL := \"mongodb+srv://daniel:my-secret-password@Tutorial-cluster.wvunv.mongodb.net/gallary-app?retryWrites=true\u0026w=majority\"\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  clientOption := options.Client().ApplyURI(connectionURL)\n\n  mongoClient, connectionError := mongo.Connect(ctx, clientOption)\n  if connectionError != nil {\n\n      panic(connectionError)\n\n  } else {\n      Client = mongoClient\n\n      // Start Listening for Server Request\n      fmt.Println(\"starting server on port 8080\")\n      errSever := http.ListenAndServe(\":8080\", router)\n      if errSever != nil {\n          panic(errSever)\n      }\n  }\n\n  \n  // Routes\n  router.HandleFunc(\"/get-photos\", GetAllPhotos).Methods(\"GET\")\n  router.HandleFunc(\"/get-photo/{id}\", GetPhoto).Methods(\"GET\")\n  router.HandleFunc(\"/create-photo\", CreatePhoto).Methods(\"POST\")\n  router.HandleFunc(\"/update-photo/{id}\", UpdatePhoto).Methods(\"PUT\")\n  router.HandleFunc(\"/delete-photo/{id}\", DeletePhoto).Methods(\"DELETE\")\n  router.HandleFunc(\"/delete-photos\", DeleteAllPhoto).Methods(\"DELETE\")\n\n}\u003c/code\u003e\u003c/pre\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n            \n                      \u003cp class=\"paragraph\"\u003eThe \u003cspan class=\"folder\"\u003emongo.connect()\u003c/span\u003e function returns two values: \u003cspan class=\"folder\"\u003emongoClient\u003c/span\u003e and \u003cspan class=\"folder\"\u003econnectionError\u003c/span\u003e. First we check for any connection error using the \u003cspan class=\"folder\"\u003econnectionError\u003c/span\u003e variable before proceeding.\u003c/p\u003e\n                      \u003cp class=\"paragraph\"\u003e\u003cspan class=\"folder\"\u003emongoClient\u003c/span\u003e is our \u003cspan class=\"important-text\"\u003econnection client\u003c/span\u003e to mongodb, we'll use this client to communicate to our mongodb, its why we store it in a globally decleared variable (\u003cspan class=\"folder\"\u003eClient\u003c/span\u003e) to make it accessible through out the application,\u003c/p\u003e\n                      \u003cp class=\"paragraph\"\u003eNotice we check for connection error before starting our server, now our server will only start running when we've connnected to mongodb.\u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          \u003carticle\u003e\n\n              \u003c!-- ** Make a post request --\u003e\n              \u003cdiv  class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eHandle a POST Request to Mongodb\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003e\n                  Lets start by creating a function (\u003cspan class=\"folder\"\u003eCreatePhoto()\u003c/span\u003e) to handle posting a new photo to\n                  our database.\n                \u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eBefore creating the POST function, define a new \u003cspan class=\"folder\"\u003estruct\u003c/span\u003e that will represent the \u003cspan class=\"folder\"\u003emodel or schema\u003c/span\u003e for each Photo object we post to our mongo database.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eOn line 12, I've created a new struct called \u003cspan class=\"folder\"\u003ePhoto\u003c/span\u003e. We'll use the struct to make post request to mongodb.\u003c/p\u003e\n                \u003cdiv class=\"code-snippet\"\u003e\n                  \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                  \u003cdiv class=\"code-body\"\u003e\n                    \u003cpre class=\"pre\"\u003e\n                          \u003ccode class=\"code go\"\u003eimport (\n  \"context\"\n  \"fmt\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gorilla/mux\"\n  \"go.mongodb.org/mongo-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\ntype Photo struct {\n  PhotoNumber int       `json:\"photo_number\"`\n  Name        string    `json:\"name\"`\n  Image       byte      `json:\"photo\"`\n  Date        time.Time `json:\"date\"`\n}\n      \n      ...\u003c/code\u003e\u003c/pre\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n    \n              \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eNow lets create a new \u003cstrong\u003ehandler function\u003c/strong\u003e \u003cspan class=\"folder\"\u003eCreatePhoto\u003c/span\u003e. Below is the function that POST a new Photo to mongodb:\u003c/p\u003e\n                \n                \u003cdiv class=\"code-snippet\"\u003e\n                  \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                  \u003cdiv class=\"code-body\"\u003e\n                    \u003cpre class=\"pre\"\u003e\n                          \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\nfunc CreatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  var newPhoto Photo\n  json.NewDecoder(r.Body).Decode(\u0026newPhoto)\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.InsertOne(ctx, newPhoto)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n                  \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cp class=\"paragraph\"\u003eIn our \u003cspan class=\"folder\"\u003eCreatePhoto\u003c/span\u003e function we start by setting our response \"content-type\" to json. Next we create a new variable of type \u003cspan class=\"folder\"\u003ePhoto\u003c/span\u003e and decode the request body into it. On line 8, using your mongo client ( \u003cspan class=\"folder\"\u003eClient\u003c/span\u003e ) connect to the particular Database and Collection you want to store the item. Next create context.\u003c/p\u003e\n              \u003cp class=\"paragraph\"\u003eLastly, on line 13 we insert the item to mongodb by calling the \u003cspan class=\"folder\"\u003eInsertOne\u003c/span\u003e function on the mongo collection. the \u003cspan class=\"folder\"\u003emongo.InsertOne\u003c/span\u003e function takes our context and Photo object as its arguments and returns an insertion result and insertion error. First we check for any error, in absence of any error we encode the result back to the front end.\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/article\u003e\n        \n\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n\n          \u003c!-- ** Make a post request --\u003e\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle a Get-All Request from Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003e\n              Below is handler function that gets all the items from our database.\n            \u003c/p\u003e\n          \u003c/div\u003e\n  \n          \u003cdiv class=\"code-snippet\"\u003e\n            \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n            \u003cdiv class=\"code-body\"\u003e\n              \u003cpre class=\"pre\"\u003e\n                    \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n...\n\nfunc GetAllPhotos(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  cursor, err := collection.Find(ctx, bson.M{})\n  if err != nil {\n    panic(err)\n  } else {\n    var allItems []bson.M\n    if err = cursor.All(ctx, \u0026allItems); err != nil {\n      panic(err)\n    } else {\n      json.NewEncoder(w).Encode(allItems)\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n            \u003c/div\u003e\n            \u003cp class=\"paragraph\"\u003eBe sure to import the \"go.mongodb.org/mongo-driver/bson\" from the mongo-driver we installed eailer\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eFirst we set our response content-type to json. Next we connect to the database collection we want to get our items from. Then create context for the get all quary.\u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003eOn line 12 we call the \u003cspan class=\"folder\"\u003eFind\u003c/span\u003e function on our mongo collection. The function takes in context and a \u003cstrong class=\"important-text\"\u003efilter\u003c/strong\u003e as its arguments, in this case we've used the \u003ca href=\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/\" target=\"_blank\" class=\"blog-link\"\u003eBSON\u003c/a\u003e type \u003cspan class=\"folder\"\u003ebson.M{}\u003c/span\u003e, this get us an unordered representation of a \u003ca href=\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/\" target=\"_blank\" class=\"blog-link\"\u003eBSON\u003c/a\u003e doucment. Read more about the mongodb \u003ca href=\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/\" target=\"_blank\" class=\"blog-link\"\u003eBSON Data Types\u003c/a\u003e if you have a specific order you want to get your item, for example you might want to get only Photos from a particular date.\u003c/p\u003e\n            \u003cblockquote class=\"definition\"\u003e\n              \u003cp class=\"quote-paragraph\"\u003e\n                \u003cstrong class=\"important-text\"\u003eBSON\u003c/strong\u003e is a binary encoded Javascript Object Notation (JSON)—a textual object notation widely used to transmit and store data across web based applications. JSON is easier to understand as it is human-readable, but compared to BSON, it supports fewer data types. BSON encodes type and length information, too, making it easier for machines to parse.\n              \u003c/p\u003e\n            \u003c/blockquote\u003e\n            \n            \u003cp class=\"paragraph\"\u003eThe \u003cspan class=\"folder\"\u003eFind\u003c/span\u003e function returns a \u003cspan class=\"folder\"\u003emongo Cursor\u003c/span\u003e. Note that the cursor is not our document, it is only a pointer to our document.\n              On line 17 we access the data from the cursor by calling the \u003cspan class=\"folder\"\u003eAll\u003c/span\u003e function on it, which iterates the cursor and decodes each document into the \u003cspan class=\"folder\"\u003eallItems\u003c/span\u003e slice.\n            \u003c/p\u003e\n  \n            \u003cblockquote class=\"definition\"\u003e\n              \u003cp class=\"quote-paragraph\"\u003e\n                In MongoDB, when the find() method is used to find the documents present in the given collection, then this method returned a pointer which will points to the documents of the collection, now this pointer is known as \u003cstrong class=\"important-text\"\u003ecursor\u003c/strong\u003e. Or in other words we can say that a cursor is a pointer, and using this pointer we can access the document.\n              \u003c/p\u003e\n  \n              \u003cp class=\"ref\"\u003e\n                ref:\n                \u003ca\n                  target=\"_blank\"\n                  class=\"blog-link\"\n                  href=\"https://www.geeksforgeeks.org/mongodb-cursor/\"\n                  \u003egeeksforgeeks.org\u003c/a\n                \u003e\n              \u003c/p\u003e\n            \u003c/blockquote\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n\n          \u003c!-- ** Make a post request --\u003e\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle Get-One Request from Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eBelow is the \u003cspan class=\"folder\"\u003eGetPhoto\u003c/span\u003e function that will get one item from our Collection using its uniqe \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property in our \u003cstrong class=\"important-text\"\u003ePhoto struct\u003c/strong\u003e.\u003c/p\u003e\n  \n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n  ...\n  \nfunc GetPhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n  \n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n  \n  var photo Photo\n  err := collection.FindOne(ctx, Photo{PhotoNumber: id}).Decode(\u0026photo)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(photo)\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n  \n            \u003cp class=\"paragraph\"\u003eSet your content type to json, then get the \u003cspan class=\"folder\"\u003eid\u003c/span\u003e param from the url, then connect to your collection and  create context.\u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003eNext, call the \u003cspan class=\"folder\"\u003eFindOne\u003c/span\u003e function on your mongo collection to get one item from your collection. The function take context and a filter as its arguments. In this case use the \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property as the filter. Decode the result of this function into a \u003cspan class=\"folder\"\u003ePhoto\u003c/span\u003e variable.\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n\n          \u003c!--  --\u003e\n                  \u003cdiv  class=\"header\"\u003e\n                    \u003ch1 class=\"topic\"\u003eHandle DeleteOne Request to Mongodb\u003c/h1\u003e\n                    \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"paragraphs-holder\"\u003e\n                    \u003cp class=\"paragraph\"\u003eTo delete an item from your collection, call the \u003cspan class=\"folder\"\u003eDeleteOne\u003c/span\u003e function on you mongo collection. The function takes context and  a filter as arguments. Like we did earlier use the \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property as the filter.\u003c/p\u003e\n          \n                    \u003cp class=\"paragraph\"\u003eBelow is the \u003cspan class=\"folder\"\u003eDeletePhoto\u003c/span\u003e function that will delete one item from our Collection using its uniqe \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property in our \u003cstrong class=\"important-text\"\u003ePhoto struct\u003c/strong\u003e.\u003c/p\u003e\n          \n                    \u003cdiv class=\"code-snippet\"\u003e\n                      \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                      \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\n                              \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n...\n\nfunc DeletePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteOne(ctx, Photo{PhotoNumber: id})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n            \u003c/code\u003e\u003c/pre\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n        \u003carticle\u003e\n\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle DeleteAll Request to Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eLet handle a request that empties our collection. To do this, call the \u003cspan class=\"folder\"\u003eDeleteMany\u003c/span\u003e function on your mongo collection. The function takes context and a filter as arguments. For the filter use the BSON type D. Since we're delete every item in the collection, we don't need to add any key to the filter.\u003c/p\u003e\n  \n            \u003cp class=\"paragraph\"\u003e\n              Below is the \u003cspan class=\"folder\"\u003eDeleteAllPhoto\u003c/span\u003e function that will delete all the items from our collection\n            \u003c/p\u003e\n  \n  \n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n...\n\nfunc DeleteAllPhotosO(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteMany(ctx, bson.D{{}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n} \u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n\n\n  \n        \u003carticle\u003e\n\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle Update Request to Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eIf you'd like to add an update feature to your project, I'll show  you how to do so in this section. You can update an item in your collection by calling the \u003cspan class=\"folder\"\u003eUpdateOne\u003c/span\u003e function on your mongo collection. The \u003cspan class=\"folder\"\u003eUpdateOne\u003c/span\u003e function take three arguments: context, a filter of the item you want to update, as well as what should be updated within the item.\u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003eThe following code is an example of how to update an item in mongodb\u003c/p\u003e\n  \n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n  ...\n  \nfunc UpdatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.UpdateOne(ctx, Photo{PhotoNumber: 1}, bson.D{{\"name\", \"Undated Name\"}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n} \u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n  \n  \n          \u003cdiv class=\"topic-holder md-2\"\u003e\n            \u003ch1 class=\"topic\"\u003eComplete Project\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\" style=\"max-height: 100%;\"\u003epackage main\n  \nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n  \"net/http\"\n  \"strconv\"\n  \"time\"\n\n  \"github.com/gorilla/mux\"\n  \"go.mongodb.org/mongo-driver/bson\"\n  \"go.mongodb.org/mongo-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\ntype Photo struct {\n  PhotoNumber int       `json:\"photo_number\"`\n  Name        string    `json:\"name\"`\n  Image       byte      `json:\"photo\"`\n  Date        time.Time `json:\"date\"`\n}\n\nvar Client *mongo.Client\n\n// Below we have our DATABASE QUERY FUNCTIONS\nfunc CreatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  var newPhoto Photo\n  json.NewDecoder(r.Body).Decode(\u0026newPhoto)\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.InsertOne(ctx, newPhoto)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc GetAllPhotos(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  cursor, err := collection.Find(ctx, bson.M{})\n  if err != nil {\n    panic(err)\n  } else {\n    var allItems []bson.M\n    if err = cursor.All(ctx, \u0026allItems); err != nil {\n      panic(err)\n    } else {\n      json.NewEncoder(w).Encode(allItems)\n    }\n  }\n}\n\nfunc GetPhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  var photo Photo\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  err := collection.FindOne(ctx, Photo{PhotoNumber: id}).Decode(\u0026photo)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(photo)\n  }\n}\n\nfunc DeletePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteOne(ctx, Photo{PhotoNumber: id})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc DeleteAllPhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteMany(ctx, bson.D{{}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc UpdatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.UpdateOne(ctx, Photo{PhotoNumber: 1}, bson.D{{\"name\", \"Undated Name\"}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc main() {\n\n  router := mux.NewRouter()\n\n  connectionURL := \"mongodb+srv://daniel:my-secret-password@Tutorial-cluster.wvunv.mongodb.net/gallary-app?retryWrites=true\u0026w=majority\"\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  clientOption := options.Client().ApplyURI(connectionURL)\n\n  mongoClient, connectionError := mongo.Connect(ctx, clientOption)\n  if connectionError != nil {\n    panic(connectionError)\n  } else {\n    Client = mongoClient\n\n    // Start Listening for Server Request\n    fmt.Println(\"starting server on port 8080\")\n    errSever := http.ListenAndServe(\":8080\", router)\n    if errSever != nil {\n      panic(errSever)\n    }\n  }\n\n  // Routes\n  router.HandleFunc(\"/get-photos\", GetAllPhotos).Methods(\"GET\")\n  router.HandleFunc(\"/get-photo/{id}\", GetPhoto).Methods(\"GET\")\n  router.HandleFunc(\"/create-photo\", CreatePhoto).Methods(\"POST\")\n  router.HandleFunc(\"/update-photo/{id}\", UpdatePhoto).Methods(\"PUT\")\n  router.HandleFunc(\"/delete-photo/{id}\", DeletePhoto).Methods(\"DELETE\")\n  router.HandleFunc(\"/delete-photos\", DeleteAllPhoto).Methods(\"DELETE\")\n\n}\u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n\u003c!-- Talk More on Context --\u003e\n\n\n    \u003c/section\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript src=\"path/to/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"path/to/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript\u003e\n      hljs.highlightAll();\n    \u003c/script\u003e\n    \u003cscript\u003e\n      hljs.initLineNumbersOnLoad();\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n",
    "category": "golang",
    "year": "2024",
    "date": "Aug 3, 2024",
    "img": "https://www.zdnet.com/a/img/resize/b20b27dc9865387a43765c62cf143e568e253844/2020/07/01/15682b00-63d3-4e6e-979e-3fcd983ba16f/mongodb.png?auto=webp\u0026width=1280",
    "imgalt": "cover image",
    "imgsource": "zdnet.com",
    "number": 3,
    "readduration": "30",
    "smallbody": "Covers how to perform various API - CRUD operations on a mongodb database using the mongodb golang driver.",
    "tags": ["mongodb", "database", "backend"],
    "title": "CRUD Operations With Mongodb Golang Driver",
    "views": 7
  },
  {
    "_id": "2",
    "body": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Create A Mongodb Cluster and Create A Connection String<\/title>\r\n    <link rel=\"stylesheet\" href=\".\/style.css\">\r\n\r\n    <link rel=\"stylesheet\" href=\"https:\/\/fonts.googleapis.com\/css2?family=Acme&display=swap\"\/>\r\n    <link rel=\"stylesheet\" href=\"https:\/\/fonts.googleapis.com\/css2?family=Questrial&display=swap\"\/>\r\n    <link rel=\"stylesheet\" href=\"https:\/\/fonts.googleapis.com\/css2?family=Acme&family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap\"\/>\r\n    <link rel=\"stylesheet\" href=\"https:\/\/fonts.googleapis.com\/css2?family=Abril+Fatface&family=Acme&display=swap\"\/>\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro:wght@200;400;500;700&display=swap\" rel=\"stylesheet\">\r\n<\/head>\r\n<body>\r\n    <section class=\"container\" style=\"max-width: 750px; margin: 0 auto\">\r\n\r\n        <!-- ** Introduction -->\r\n\r\n        <article>\r\n            <div class=\"header\">\r\n                <h3 class=\"topic\">Introduction<\/h3>\r\n                <div class=\"line\"><\/div>\r\n            <\/div>\r\n        \r\n            <div class=\"paragraphs-holder\">\r\n                <p class=\"paragraph\">Creating a Mongo Database Cluster is the first step to working with mongodb. This article will take you through a step by step guide on how to create a free mongo database in the mongodb official website and generate a <strong class=\"important-text\">Database Connection URL<\/strong>.<\/p>\r\n\r\n                <blockquote class=\"definition\">\r\n                    <p class=\"quote-paragraph\">A Database Connection URL is a string that your DBMS JDBC driver uses to connect to a database. It can contain information such as where to search for the database, the name of the database to connect to, and configuration properties.<\/p>\r\n                    <p class=\"ref\">ref: <a target=\"_blank\" href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/jdbc\/basics\/connecting.html#:~:text=A%20database%20connection%20URL%20is,connect%20to%2C%20and%20configuration%20properties.\" >docs.oracle.com<\/a><\/p>\r\n                <\/blockquote>\r\n            <\/div>\r\n        <\/article>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <!-- ** Introduction -->\r\n         <article>\r\n             <div class=\"header\">\r\n                <h3 class=\"topic\">Create a Free Mongodb Atlas Account<\/h3>\r\n                <div class=\"line\"><\/div>\r\n            <\/div>\r\n            <div class=\"paragraphs-holder\">\r\n             <p class=\"paragraph\">To use mongodb, you'll need a free <strong class=\"important-text\">MongoDB Atlas Account<\/strong>. Follow the following steps to do so:<\/p>\r\n                 <div class=\"list-holder paragraph\">\r\n                     <!--** Ordered List -->\r\n                     <ol>\r\n                         <!-- ** Item 1 -->\r\n                         <li class=\"list\"> Head to the <a target=\"_blank\" href=\"https:\/\/cloud.mongodb.com\/\" class=\"blog-link\">mongodb official website<\/a><\/li>\r\n                         <li class=\"list\"> Click on \"try free\" to sign up<\/li>\r\n                         <a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture.jpg?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                             <img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture.jpg?raw=true\" alt=\"mongodb\" class=\"img\">\r\n                         <\/a>\r\n                         <li class=\"list\">Fill the form that follows to create a free Mongodb Atlas Account<\/li>\r\n                         <li class=\"list\">Verify your email account and sign in using your set email and passoword<\/li>\r\n                     <\/ol>\r\n                 <\/div>\r\n             <\/div>\r\n         <\/article>\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        <!-- ** Introduction -->\r\n         <article>\r\n             <div class=\"header\">\r\n                 <h3 class=\"topic\">Create a Database<\/h3>\r\n                 <div class=\"line\"><\/div>\r\n             <\/div>\r\n             \r\n             <a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture2.jpg?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                 <img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture2.jpg?raw=true\" alt=\"mongodb\" class=\"img\">\r\n             <\/a>\r\n             <div class=\"paragraphs-holder\">\r\n                 <p class=\"paragraph\">Notice the \"project menu\" at top-left coner. Every Mongodb Database must be in a project. Mongodb creates a default project ( <strong class=\"important-text\">'project 0'<\/strong> ), but you can create as many projects as you want by clicking on the project menu. We'll be using the default for now. <\/p>\r\n                 <p class=\"paragraph\">Now lets create your first Database:<\/p>\r\n     \r\n                 <div class=\"list-holder paragraph\">\r\n                     <!--** Ordered List -->\r\n                     <ol>\r\n                         <!-- ** Item 1 -->\r\n                         <li class=\"list\">Click on \"Build a Database\"<\/li>\r\n                         <li class=\"list\">Choose a deployment option<\/li>\r\n                         <p class=\"paragraph\">Any of the deployment option will work for this tutorial, but I'll recommend starting out with the free Shared option for learning and exploring MongoDB in a sandbox environment..<\/p>\r\n                         <li class=\"list\">Additional Information<\/li>\r\n                         <p class=\"paragraph\">You can provide addition information about your Database Cluster, such as Cloud Provider & Region, Cluster Tier etc. I have left every option as default except for the Cluster Name which I've changed to <strong class=\"important-text\">Tutorial-cluster<\/strong><\/p>\r\n                         <a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/4.jpg?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                             <img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/4.jpg?raw=true\" alt=\"mongodb website\" class=\"img\">\r\n                         <\/a>\r\n                         <li class=\"list\">Click \"Create Cluster\"<\/li>\r\n                         <li class=\"list\">Security Quickstart Options<\/li>\r\n                         <p>To access data stored in Atlas, you'll need to create users and set up network security controls.<\/p>\r\n                         <p>Choose Username and Password as your authentication method and create a user<\/p>\r\n                         <p>Choose My Local Environment as your network access method and click \"Add My Current IP Address\" to give connection access to your current device <\/p>\r\n                         <p>Click \"finish and close\"<\/p>\r\n                         <a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture5.jpg?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                             <img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture5.jpg?raw=true\" alt=\"mongodb website\" class=\"img\">\r\n                         <\/a>\r\n                     <\/ol>\r\n                 <\/div>\r\n             <\/div>\r\n         <\/article>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        <!-- ** Introduction -->\r\n         <article>\r\n            \r\n             <div class=\"header\">\r\n                 <h3 class=\"topic\">Generate a Connection URL<\/h3>\r\n                 <div class=\"line\"><\/div>\r\n             <\/div>\r\n             <a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture6.jpg?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                 <img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture6.jpg?raw=true\" alt=\"mongodb website\" class=\"img\">\r\n             <\/a>\r\n             <div class=\"paragraphs-holder\">\r\n                 <p class=\"paragraph\">Now our Database is created, we can now generate a Connection URL to connect to our Database <\/p>\r\n                 <div class=\"list-holder paragraph\">\r\n                     <!--** Ordered List -->\r\n                     <ol>\r\n                         <li class=\"paragraph\">Start by clicking on the \"connection\" button shown in the above image<\/li>\r\n                         <li class=\"paragraph\">Next, choose a connection method that suit your use case ( for this tutorial we'll use 'connect your application' )<\/li>\r\n                         <li class=\"paragraph\">Choose the <strong class=\"important-text\">driver<\/strong> and <strong class=\"important-text\">version<\/strong> you're working with and your <strong class=\"important-text\">connection string<\/strong> will be generated for you<\/li>\r\n                         \r\n                     <\/ol>\r\n                     <a target=\"_blank\" href=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture7.jpg?raw=true\" class=\"glightbox\" data-gallery=\"gallery1\">\r\n                         <img src=\"https:\/\/github.com\/daniel-idoko\/blog-images\/blob\/main\/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String\/Capture7.jpg?raw=true\" alt=\"mongodb website\" class=\"img\">\r\n                     <\/a>\r\n                     <p class=\"paragraph\">Don't forget to replace the <strong class=\"important-text\"> &lt;password&gt; <\/strong> param with your Mongodb Atlas Account password<\/p>\r\n                 <\/div>\r\n                 \r\n             <\/div>\r\n         <\/article>\r\n    <\/section>\r\n\r\n\r\n\r\n<\/body>\r\n<\/html>",
    "category": "database",
    "year": "2024",
    "date": "July 18, 2024",
    "img": "https://webimages.mongodb.com/_com_assets/cms/kuzt9r42or1fxvlq2-Meta_Generic.png",
    "imgalt": "mongodb",
    "imgsource": "mongodb.com",
    "number": 2,
    "readduration": "30",
    "smallbody": "How to create a free mongodb atlas account and generate a Database Connection URL.",
    "tags": ["mongodb", "database", "backend"],
    "title": "Create A Mongodb Cluster and Create A Database Connection URL",
    "views": 2
  },
  {
    "_id": "1",
    "body": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\" /\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n    \u003ctitle\u003eHow to Get and Set Browser URL in Javascript\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"./style.css\" /\u003e\n\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Questrial\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface\u0026family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /\u003e\n    \u003clink\n      href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200;400;500;700\u0026display=swap\"\n      rel=\"stylesheet\"\n    /\u003e\n    \u003clink\n    rel=\"stylesheet\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css\"\n  /\u003e\n  \u003c/head\u003e\n\n  \u003cstyle\u003e\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  \u003c/style\u003e\n\n  \u003cbody\u003e\n    \u003csection class=\"container\" style=\"max-width: 750px; margin: 0 auto\"\u003e\n      \u003cdiv\u003e\n        \u003c!-- ** Introduction --\u003e\n        \u003cdiv class=\"topic-holder\"\u003e\n          \u003ch1 class=\"topic\"\u003eIntroduction\u003c/h1\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003e\n            Javascript's \u003cspan class=\"folder\"\u003ewindow\u003c/span\u003e object gives you access to manipulate or control the web brower,\n            this is called\n            \u003cstrong class=\"important-text\"\u003eBrower Control\u003c/strong\u003e. In this\n            article you'll learn how to get the browers current Uniform Resourse\n            Location (URL) and change it to what ever you want using\n            Javascript.\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n        \u003cdiv\u003e\n        \u003c!-- ** Introduction --\u003e\n            \u003cdiv class=\"topic-holder\"\u003e\n                \u003ch1 class=\"topic\"\u003eGetting the Brower Current URL\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n\n\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eTo get the current URL, call the \u003cspan class=\"folder\"\u003ehref\u003c/span\u003e method on the \u003cspan class=\"folder\"\u003ewindow.location\u003c/span\u003e object.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst currentURL = window.location.href\nconsole.log(currentURL)     \u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n\n                  \n            \u003c/div\u003e\n                \n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eNote that the \u003cspan class=\"folder\"\u003ehref\u003c/span\u003e method will get you the full URL. But you can get the URL in pieces by calling other methods on the \u003cspan class=\"folder\"\u003ewindow.location\u003c/span\u003e object.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eUse the \u003cspan class=\"folder\"\u003epathname\u003c/span\u003e method to get only the current path.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst currentPath = window.location.pathname\nconsole.log(currentPath)\n                        \u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n\n                \n\n                \u003cp class=\"paragraph\"\u003eUse the \u003cspan class=\"folder\"\u003ehostname\u003c/span\u003e method to get only the domain or site name.\u003c/p\u003e\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst domainName = window.location.hostname\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n\n                \n                  \u003cp class=\"paragraph\"\u003eIf the URL includes an \u003cstrong class=\"important-text\"\u003eAnchor\u003c/strong\u003e pointing to a section of the page, use the \u003cspan class=\"folder\"\u003ehash\u003c/span\u003e method to get it.\u003c/p\u003e\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst theAnchor = window.location.hash\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \n            \u003c/div\u003e\n\n        \u003c/div\u003e\n\n\n        \u003cdiv\u003e\n            \u003c!-- ** Introduction --\u003e\n            \u003cdiv class=\"topic-holder\"\u003e\n                \u003ch1 class=\"topic\"\u003eSetting the Brower Current URL\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eAs metioned earlier, you can also tell the browser to navigate to a different destination or URL path.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003ewindow.location.href = \"www.google.com/search\"\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cp class=\"paragraph\"\u003eThe above code will navigate your brower to google's search page.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eBelow is a common use case for redirecting your browser to a different page on your current website.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003evar currentSite = window.location.hostname;\nvar destination = \"http://\" + currentSite + \"/another-page\";\nwindow.location.href = destination;\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n    \u003c/section\u003e\n\n\n\n\n\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript src=\"path/to/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"path/to/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript\u003e\n      hljs.highlightAll();\n    \u003c/script\u003e\n    \u003cscript\u003e\n      hljs.initLineNumbersOnLoad();\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e",
    "category": "javascript",
    "year": "2024",
    "date": "July 8, 2024",
    "img": "https://www.computerhope.com/jargon/j/javascript.png",
    "imgalt": "js-logo",
    "imgsource": "computerhope.com",
    "number": 1,
    "readduration": "5",
    "smallbody": "Learn how to get the browser's current URL and change it to whatever you want using Javascript.",
    "tags": ["javascirpt", "web-dev"],
    "title": "How to Get and Set Browser URL in Javascript",
    "views": 1
  }
]





